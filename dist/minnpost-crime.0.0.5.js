/**
 * Some core functionality for minnpost-crime
 */

/**
 * Global variable to handle some things
 * like templates.
 */
var mpApp = mpApp || {};
mpApp['minnpost-crime'] = mpApp['minnpost-crime'] || {};

/**
 * Extend underscore
 */
_.mixin({
  /**
   * Formats number
   */
  formatNumber: function(num, decimals) {
    decimals = (_.isUndefined(decimals)) ? 2 : decimals;
    var rgx = (/(\d+)(\d{3})/);
    split = num.toFixed(decimals).toString().split('.');

    while (rgx.test(split[0])) {
      split[0] = split[0].replace(rgx, '$1' + ',' + '$2');
    }
    return (decimals) ? split[0] + '.' + split[1] : split[0];
  },

  /**
   * Formats number into currency
   */
  formatCurrency: function(num) {
    return '$' + _.formatNumber(num, 2);
  },

  /**
   * Formats percentage
   */
  formatPercent: function(num) {
    return _.formatNumber(num * 100, 1) + '%';
  },

  /**
   * Formats percent change
   */
  formatPercentChange: function(num) {
    return ((num > 0) ? '+' : '') + _.formatPercent(num);
  },

  /**
   * Formats percent change with HTML
   */
  formatPercentChangeStyled: function(num) {
    var cClass = (num === 0) ? 'zero' : ((num > 0) ? 'positive' : 'negative');
    return '<span class="per-change per-change-' + cClass + '">' + _.formatPercentChange(num) + '</span>';
  },

  /**
   * Format value given difference from another value
   */
  formatDifferenceStyled: function(num, compare) {
    var cClass = (num === compare) ? 'none' : ((num > compare) ? 'more' : 'less');
    var symbol = (num === compare) ? '' : ((num > compare) ? '&uarr;' : '&darr;');
    symbol = '<span class="diff-symbol">' + symbol + '</span>';
    return '<span class="diff-compare diff-compare-' + cClass + '">' + symbol + _.formatNumber(num) + '</span>';
  },

  /**
   * Strips formatting from number
   */
  stripNumber: function(text) {
    return text.replace(/[^0-9\.]+/g, '');
  }
});

/**
 * Override Backbone's ajax function to use $.jsonp as it handles
 * errors for JSONP requests
 */
if (_.isFunction(Backbone.$.jsonp)) {
  Backbone.ajax = function() {
    return Backbone.$.jsonp.apply(Backbone.$, arguments);
  };
}

/**
 * Non global
 */
(function(app, $, undefined) {
  app.defaultOptions = {
    dataPath: './data/',
    // Please don't steal/abuse
    mapQuestKey: 'Fmjtd%7Cluur20a7n0%2C8n%3Do5-9a1s9f',
    mapQuestQuery: 'http://open.mapquestapi.com/geocoding/v1/address?key=[[[KEY]]]&outFormat=json&countrycodes=us&maxResults=1&location=[[[ADDRESS]]]&callback=?',
    dataCrimeQueryBase: 'https://premium.scraperwiki.com/tceqzbx/4qjijko7n7ptqzt/sql/?q=[[[QUERY]]]'
  };

  /**
   * Template handling.  For development, we want to use
   * the template files directly, but for build, they should be
   * compiled into JS.
   *
   * See JST grunt plugin to understand how templates
   * are compiled.
   *
   * Expects callback like: function(compiledTemplate) {  }
   */
  app.templates = app.templates || {};
  app.getTemplate = function(name, callback, context) {
    var templatePath = 'js/templates/' + name + '.html';
    context = context || app;

    if (!_.isUndefined(app.templates[templatePath])) {
      callback.apply(context, [ app.templates[templatePath] ]);
    }
    else {
      $.ajax({
        url: templatePath,
        method: 'GET',
        async: false,
        contentType: 'text',
        success: function(data) {
          app.templates[templatePath] = _.template(data);
          callback.apply(context, [ app.templates[templatePath] ]);
        }
      });
    }
  };

  /**
   * Data source handling.  For development, we can call
   * the data directly from the JSON file, but for production
   * we want to proxy for JSONP.
   *
   * `name` should be relative path to dataset minus the .json
   *
   * Returns jQuery's defferred object.
   */
  app.data = app.data || {};
  app.getLocalData = function(name) {
    var proxyPrefix = 'http://mp-jsonproxy.herokuapp.com/proxy?callback=?&url=';
    var useJSONP = false;
    var defers = [];

    name = (_.isArray(name)) ? name : [ name ];

    // If the data path is not relative, then use JSONP
    if (app.options && app.options.dataPath.indexOf('http') === 0) {
      useJSONP = true;
    }

    // Go through each file and add to defers
    _.each(name, function(d) {
      var defer;
      if (_.isUndefined(app.data[d])) {

        if (useJSONP) {
          defer = $.jsonp({
            url: proxyPrefix + encodeURI(app.options.dataPath + d + '.json')
          });
        }
        else {
          defer = $.getJSON(app.options.dataPath + d + '.json');
        }

        $.when(defer).done(function(data) {
          app.data[d] = data;
        });
        defers.push(defer);
      }
    });

    return $.when.apply($, defers);
  };

  /**
   * Get remote data.  Provides a wrapper around
   * getting a remote data source, to use a proxy
   * if needed, such as using a cache.
   */
  app.getRemoteData = function(options) {
    if (app.options.remoteProxy) {
      options.url = options.url + '&callback=proxied_jqjsp';
      options.url = app.options.remoteProxy + encodeURIComponent(options.url);
      options.callback = 'proxied_jqjsp';
      options.cache = true;
    }
    else {
      options.url = options.url + '&callback=?';
    }

    return $.jsonp(options);
  };

  /**
   * Point in polygon search from
   * https://github.com/substack/point-in-polygon
   */
  app.pip = function(point, vs) {
    // ray-casting algorithm based on
    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

    var x = point[0], y = point[1];

    var inside = false;
    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
      var xi = vs[i][0], yi = vs[i][1];
      var xj = vs[j][0], yj = vs[j][1];

      var intersect = ((yi > y) != (yj > y)) &&
        (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
      if (intersect) {
        inside = !inside;
      }
    }

    return inside;
  };
})(mpApp['minnpost-crime'], jQuery);


mpApp["minnpost-crime"].data["neighborhoods/minneapolis.topo"] = {"type":"Topology","bbox":[-93.32910837187512,44.89058850768167,-93.19432851979272,45.05124625991063],"transform":{"scale":[0.000013479333141554439,0.000016067381961091805],"translate":[-93.32910837187512,44.89058850768167]},"objects":{"neighborhoods":{"type":"GeometryCollection","crs":{"type":"name","properties":{"name":"urn:ogc:def:crs:OGC:1.3:CRS84"}},"geometries":[{"type":"Polygon","arcs":[[0,1,2,3]],"id":"phillips_west","properties":{"city":"minneapolis","key":"phillips_west","title":"Phillips West","population":{"2000":4771,"2010":4727}}},{"type":"Polygon","arcs":[[4,5,6,7,8,9,10]],"id":"downtown_west","properties":{"city":"minneapolis","key":"downtown_west","title":"Downtown West","population":{"2000":4581,"2010":5781}}},{"type":"Polygon","arcs":[[11,12,-6,13]],"id":"downtown_east","properties":{"city":"minneapolis","key":"downtown_east","title":"Downtown East","population":{"2000":128,"2010":1254}}},{"type":"Polygon","arcs":[[14,15,16,-4,17,18,19,20]],"id":"ventura_village","properties":{"city":"minneapolis","key":"ventura_village","title":"Ventura Village","population":{"2000":6769,"2010":6537}}},{"type":"Polygon","arcs":[[21,22,23]],"id":"sumner_glenwood","properties":{"city":"minneapolis","key":"sumner_glenwood","title":"Sumner - Glenwood","population":{"2000":144,"2010":1475}}},{"type":"Polygon","arcs":[[24,25,26]],"id":"shingle_creek","properties":{"city":"minneapolis","key":"shingle_creek","title":"Shingle Creek","population":{"2000":3170,"2010":3031}}},{"type":"Polygon","arcs":[[27,28,-25,29,30]],"id":"lind_bohanon","properties":{"city":"minneapolis","key":"lind_bohanon","title":"Lind - Bohanon","population":{"2000":4401,"2010":4569}}},{"type":"Polygon","arcs":[[-28,31,32,33,34,35]],"id":"webber_camden","properties":{"city":"minneapolis","key":"webber_camden","title":"Webber - Camden","population":{"2000":5676,"2010":5097}}},{"type":"Polygon","arcs":[[36,37,38,39]],"id":"bottineau","properties":{"city":"minneapolis","key":"bottineau","title":"Bottineau","population":{"2000":1254,"2010":1656}}},{"type":"Polygon","arcs":[[40,-35,41,42]],"id":"victory","properties":{"city":"minneapolis","key":"victory","title":"Victory","population":{"2000":4975,"2010":4580}}},{"type":"Polygon","arcs":[[43,-26,-29,-36,-41]],"id":"humboldt_industrial_area","properties":{"city":"minneapolis","key":"humboldt_industrial_area","title":"Humboldt Industrial Area","population":{"2000":0,"2010":null}}},{"type":"Polygon","arcs":[[44,45,46,47,48,49]],"id":"howe","properties":{"city":"minneapolis","key":"howe","title":"Howe","population":{"2000":6878,"2010":6608}}},{"type":"Polygon","arcs":[[50,51,52,53,54,-46]],"id":"hiawatha","properties":{"city":"minneapolis","key":"hiawatha","title":"Hiawatha","population":{"2000":5304,"2010":5461}}},{"type":"Polygon","arcs":[[55,56,57,58]],"id":"windom","properties":{"city":"minneapolis","key":"windom","title":"Windom","population":{"2000":4984,"2010":4980}}},{"type":"Polygon","arcs":[[59,60,61,62,-54,-53]],"id":"ericsson","properties":{"city":"minneapolis","key":"ericsson","title":"Ericsson","population":{"2000":3149,"2010":3192}}},{"type":"Polygon","arcs":[[63,64,65,66]],"id":"field","properties":{"city":"minneapolis","key":"field","title":"Field","population":{"2000":2526,"2010":2366}}},{"type":"Polygon","arcs":[[67,68,69,-65]],"id":"page","properties":{"city":"minneapolis","key":"page","title":"Page","population":{"2000":1682,"2010":1730}}},{"type":"Polygon","arcs":[[70,71,72,73,74,75]],"id":"como","properties":{"city":"minneapolis","key":"como","title":"Como","population":{"2000":5691,"2010":6288}}},{"type":"Polygon","arcs":[[76,77,78,-21,79,-12,80]],"id":"cedar_riverside","properties":{"city":"minneapolis","key":"cedar_riverside","title":"Cedar Riverside","population":{"2000":7545,"2010":8094}}},{"type":"Polygon","arcs":[[81,82,83,-78,84,-72]],"id":"prospect_park_east_river","properties":{"city":"minneapolis","key":"prospect_park_east_river","title":"Prospect Park - East River","population":{"2000":6326,"2010":7457}}},{"type":"Polygon","arcs":[[-85,-77,85,-73]],"id":"university_of_minnesota","properties":{"city":"minneapolis","key":"university_of_minnesota","title":"University of Minnesota","population":{"2000":4026,"2010":5421}}},{"type":"Polygon","arcs":[[86,87,88,89,90,91,92]],"id":"jordan","properties":{"city":"minneapolis","key":"jordan","title":"Jordan","population":{"2000":9149,"2010":7360}}},{"type":"Polygon","arcs":[[-38,93,94,-88,95,96]],"id":"hawthorne","properties":{"city":"minneapolis","key":"hawthorne","title":"Hawthorne","population":{"2000":6333,"2010":4567}}},{"type":"Polygon","arcs":[[97,98,99,-91,100]],"id":"willard_hay","properties":{"city":"minneapolis","key":"willard_hay","title":"Willard - Hay","population":{"2000":9277,"2010":8611}}},{"type":"Polygon","arcs":[[-95,101,102,-24,103,-98,-90,-89]],"id":"near_north","properties":{"city":"minneapolis","key":"near_north","title":"Near - North","population":{"2000":6921,"2010":5968}}},{"type":"Polygon","arcs":[[-23,104,105,106,107,-99,-104]],"id":"harrison","properties":{"city":"minneapolis","key":"harrison","title":"Harrison","population":{"2000":4152,"2010":3211}}},{"type":"Polygon","arcs":[[108,109,110,111,112,-8]],"id":"loring_park","properties":{"city":"minneapolis","key":"loring_park","title":"Loring Park","population":{"2000":7501,"2010":7873}}},{"type":"Polygon","arcs":[[-19,113,114,-110]],"id":"stevens_square_loring_heights","properties":{"city":"minneapolis","key":"stevens_square_loring_heights","title":"Stevens Square - Loring Heights","population":{"2000":3948,"2010":3833}}},{"type":"Polygon","arcs":[[115,116,117,-60,-52]],"id":"minnehaha","properties":{"city":"minneapolis","key":"minnehaha","title":"Minnehaha","population":{"2000":4058,"2010":3980}}},{"type":"Polygon","arcs":[[118,119,-56,-69,120]],"id":"diamond_lake","properties":{"city":"minneapolis","key":"diamond_lake","title":"Diamond Lake","population":{"2000":5251,"2010":5480}}},{"type":"Polygon","arcs":[[121,-50,122,123,-83]],"id":"cooper","properties":{"city":"minneapolis","key":"cooper","title":"Cooper","population":{"2000":3448,"2010":3503}}},{"type":"Polygon","arcs":[[-70,-59,124,125,-66]],"id":"tangletown","properties":{"city":"minneapolis","key":"tangletown","title":"Tangletown","population":{"2000":4263,"2010":4351}}},{"type":"Polygon","arcs":[[126,-9,-113,127,-105,-22,-103,128]],"id":"north_loop","properties":{"city":"minneapolis","key":"north_loop","title":"North Loop","population":{"2000":1515,"2010":4291}}},{"type":"Polygon","arcs":[[129,130,-121,-68,131]],"id":"hale","properties":{"city":"minneapolis","key":"hale","title":"Hale","population":{"2000":3196,"2010":3176}}},{"type":"Polygon","arcs":[[132,-130,133,-61,-118]],"id":"keewaydin","properties":{"city":"minneapolis","key":"keewaydin","title":"Keewaydin","population":{"2000":3178,"2010":3096}}},{"type":"Polygon","arcs":[[134,135,136,137]],"id":"fulton","properties":{"city":"minneapolis","key":"fulton","title":"Fulton","population":{"2000":5566,"2010":5860}}},{"type":"Polygon","arcs":[[-125,138,139,-135,140,141]],"id":"lynnhurst","properties":{"city":"minneapolis","key":"lynnhurst","title":"Lynnhurst","population":{"2000":5613,"2010":5826}}},{"type":"Polygon","arcs":[[142,143,144,145]],"id":"bancroft","properties":{"city":"minneapolis","key":"bancroft","title":"Bancroft","population":{"2000":3606,"2010":3371}}},{"type":"Polygon","arcs":[[-55,146,-63,-143,147,148,-47]],"id":"standish","properties":{"city":"minneapolis","key":"standish","title":"Standish","population":{"2000":6632,"2010":6527}}},{"type":"Polygon","arcs":[[-84,-124,149,150,-15,-79]],"id":"seward","properties":{"city":"minneapolis","key":"seward","title":"Seward","population":{"2000":7174,"2010":7308}}},{"type":"Polygon","arcs":[[-123,-49,151,152,-150]],"id":"longfellow","properties":{"city":"minneapolis","key":"longfellow","title":"Longfellow","population":{"2000":4972,"2010":4895}}},{"type":"Polygon","arcs":[[-115,153,154,155,156,-111]],"id":"lowry_hill_east","properties":{"city":"minneapolis","key":"lowry_hill_east","title":"Lowry Hill East","population":{"2000":5912,"2010":6150}}},{"type":"Polygon","arcs":[[157,158,159,160,161]],"id":"ecco","properties":{"city":"minneapolis","key":"ecco","title":"ECCO","population":{"2000":2545,"2010":2457}}},{"type":"Polygon","arcs":[[162,163,-158,-155]],"id":"carag","properties":{"city":"minneapolis","key":"carag","title":"CARAG","population":{"2000":5907,"2010":5647}}},{"type":"Polygon","arcs":[[-151,-153,164,165,166,-16]],"id":"east_phillips","properties":{"city":"minneapolis","key":"east_phillips","title":"East Phillips","population":{"2000":4147,"2010":4269}}},{"type":"Polygon","arcs":[[167,-93,168,-42]],"id":"cleveland","properties":{"city":"minneapolis","key":"cleveland","title":"Cleveland","population":{"2000":3440,"2010":3025}}},{"type":"Polygon","arcs":[[169,170,-119,-131,-133]],"id":"wenonah","properties":{"city":"minneapolis","key":"wenonah","title":"Wenonah","population":{"2000":4422,"2010":4521}}},{"type":"Polygon","arcs":[[171,172,173,174,-40,175,176]],"id":"holland","properties":{"city":"minneapolis","key":"holland","title":"Holland","population":{"2000":4381,"2010":4507}}},{"type":"Polygon","arcs":[[177,178,-172,179,180]],"id":"audubon_park","properties":{"city":"minneapolis","key":"audubon_park","title":"Audubon Park","population":{"2000":5256,"2010":4962}}},{"type":"Polygon","arcs":[[181,-67,182,183]],"id":"regina","properties":{"city":"minneapolis","key":"regina","title":"Regina","population":{"2000":2489,"2010":2292}}},{"type":"Polygon","arcs":[[-62,-134,-132,-64,-182,-144]],"id":"northrop","properties":{"city":"minneapolis","key":"northrop","title":"Northrop","population":{"2000":4335,"2010":4369}}},{"type":"Polygon","arcs":[[-175,184,185,-94,-37]],"id":"sheridan","properties":{"city":"minneapolis","key":"sheridan","title":"Sheridan","population":{"2000":2703,"2010":2884}}},{"type":"Polygon","arcs":[[186,187,188,189,-185,-174]],"id":"logan_park","properties":{"city":"minneapolis","key":"logan_park","title":"Logan Park","population":{"2000":2222,"2010":2179}}},{"type":"Polygon","arcs":[[-187,-173,-179,190,191]],"id":"windom_park","properties":{"city":"minneapolis","key":"windom_park","title":"Windom Park","population":{"2000":5786,"2010":5678}}},{"type":"Polygon","arcs":[[192,-141,-138,193,194]],"id":"linden_hills","properties":{"city":"minneapolis","key":"linden_hills","title":"Linden Hills","population":{"2000":7370,"2010":7564}}},{"type":"Polygon","arcs":[[195,-142,-193,-159,-164]],"id":"east_harriet","properties":{"city":"minneapolis","key":"east_harriet","title":"East Harriet","population":{"2000":3999,"2010":3604}}},{"type":"Polygon","arcs":[[196,197,-183,-126,-196,198]],"id":"king_field","properties":{"city":"minneapolis","key":"king_field","title":"King Field","population":{"2000":7816,"2010":7473}}},{"type":"Polygon","arcs":[[-170,-117,199]],"id":"morris_park","properties":{"city":"minneapolis","key":"morris_park","title":"Morris Park","population":{"2000":2984,"2010":2819}}},{"type":"Polygon","arcs":[[200,201,202,-76]],"id":"mid_city_industrial","properties":{"city":"minneapolis","key":"mid_city_industrial","title":"Mid - City Industrial","population":{"2000":15,"2010":201}}},{"type":"Polygon","arcs":[[203,-1,-17,-167]],"id":"midtown_phillips","properties":{"city":"minneapolis","key":"midtown_phillips","title":"Midtown Phillips","population":{"2000":4118,"2010":4782}}},{"type":"Polygon","arcs":[[-160,-195,204,205]],"id":"west_calhoun","properties":{"city":"minneapolis","key":"west_calhoun","title":"West Calhoun","population":{"2000":1865,"2010":1740}}},{"type":"Polygon","arcs":[[206,207,208,209,-107]],"id":"bryn_mawr","properties":{"city":"minneapolis","key":"bryn_mawr","title":"Bryn - Mawr","population":{"2000":2663,"2010":2651}}},{"type":"Polygon","arcs":[[210,211,-188,-192,212]],"id":"northeast_park","properties":{"city":"minneapolis","key":"northeast_park","title":"Northeast Park","population":{"2000":882,"2010":672}}},{"type":"Polygon","arcs":[[213,214,-129,-102,-186]],"id":"st_anthony_west","properties":{"city":"minneapolis","key":"st_anthony_west","title":"St. Anthony West","population":{"2000":2666,"2010":2243}}},{"type":"Polygon","arcs":[[215,216,217,-214,-190]],"id":"st_anthony_east","properties":{"city":"minneapolis","key":"st_anthony_east","title":"St. Anthony East","population":{"2000":2105,"2010":2038}}},{"type":"Polygon","arcs":[[218,-197,219,-2,220]],"id":"central","properties":{"city":"minneapolis","key":"central","title":"Central","population":{"2000":8150,"2010":8307}}},{"type":"Polygon","arcs":[[-148,-146,-221,-204,-166,221]],"id":"powderhorn_park","properties":{"city":"minneapolis","key":"powderhorn_park","title":"Powderhorn Park","population":{"2000":8957,"2010":8655}}},{"type":"Polygon","arcs":[[-152,-48,-149,-222,-165]],"id":"corcoran","properties":{"city":"minneapolis","key":"corcoran","title":"Corcoran","population":{"2000":4228,"2010":3942}}},{"type":"Polygon","arcs":[[-184,-198,-219,-145]],"id":"bryant","properties":{"city":"minneapolis","key":"bryant","title":"Bryant","population":{"2000":2789,"2010":2833}}},{"type":"Polygon","arcs":[[-58,222,223,-139]],"id":"kenny","properties":{"city":"minneapolis","key":"kenny","title":"Kenny","population":{"2000":3493,"2010":3523}}},{"type":"Polygon","arcs":[[-140,-224,224,-136]],"id":"armatage","properties":{"city":"minneapolis","key":"armatage","title":"Armatage","population":{"2000":4759,"2010":4895}}},{"type":"Polygon","arcs":[[-75,225,-216,-189,-212,-201]],"id":"beltrami","properties":{"city":"minneapolis","key":"beltrami","title":"Beltrami","population":{"2000":1277,"2010":1248}}},{"type":"Polygon","arcs":[[226,227,-161,-206,228,-209]],"id":"cedar_isles_dean","properties":{"city":"minneapolis","key":"cedar_isles_dean","title":"Cedar - Isles - Dean","population":{"2000":2698,"2010":2925}}},{"type":"Polygon","arcs":[[229,-227,-208,230]],"id":"kenwood","properties":{"city":"minneapolis","key":"kenwood","title":"Kenwood","population":{"2000":1500,"2010":1414}}},{"type":"Polygon","arcs":[[-128,-112,-157,231,-231,-207,-106]],"id":"lowry_hill","properties":{"city":"minneapolis","key":"lowry_hill","title":"Lowry Hill","population":{"2000":3999,"2010":3760}}},{"type":"Polygon","arcs":[[-156,-162,-228,-230,-232]],"id":"east_isles","properties":{"city":"minneapolis","key":"east_isles","title":"East Isles","population":{"2000":3340,"2010":3169}}},{"type":"Polygon","arcs":[[-13,-80,-20,-109,-7]],"id":"elliot_park","properties":{"city":"minneapolis","key":"elliot_park","title":"Elliot Park","population":{"2000":6476,"2010":6693}}},{"type":"Polygon","arcs":[[-11,-10,-127,-215,-218,232]],"id":"nicollet_island_east_bank","properties":{"city":"minneapolis","key":"nicollet_island_east_bank","title":"Nicollet Island - East Bank","population":{"2000":828,"2010":1309}}},{"type":"Polygon","arcs":[[-74,-86,-81,-14,-5,233,-233,-217,-226]],"id":"marcy_holmes","properties":{"city":"minneapolis","key":"marcy_holmes","title":"Marcy Holmes","population":{"2000":9009,"2010":10015}}},{"type":"Polygon","arcs":[[234,-96,-87,-168,-34]],"id":"folwell","properties":{"city":"minneapolis","key":"folwell","title":"Folwell","population":{"2000":6331,"2010":5344}}},{"type":"Polygon","arcs":[[235,236,-97,-235,-33]],"id":"mckinley","properties":{"city":"minneapolis","key":"mckinley","title":"McKinley","population":{"2000":3658,"2010":3132}}},{"type":"Polygon","arcs":[[237,238,239,-236,-32,240]],"id":"camden_industrial","properties":{"city":"minneapolis","key":"camden_industrial","title":"Camden Industrial","population":{"2000":47,"2010":null}}},{"type":"Polygon","arcs":[[-180,-177,241,-239,242,243]],"id":"columbia_park","properties":{"city":"minneapolis","key":"columbia_park","title":"Columbia Park","population":{"2000":1834,"2010":1563}}},{"type":"Polygon","arcs":[[-244,244,-181]],"id":"waite_park","properties":{"city":"minneapolis","key":"waite_park","title":"Waite Park","population":{"2000":5205,"2010":5244}}},{"type":"Polygon","arcs":[[-176,-39,-237,-240,-242]],"id":"marshall_terrace","properties":{"city":"minneapolis","key":"marshall_terrace","title":"Marshall Terrace","population":{"2000":1342,"2010":1381}}},{"type":"Polygon","arcs":[[-18,-3,245,-154,-114]],"id":"whittier","properties":{"city":"minneapolis","key":"whittier","title":"Whittier","population":{"2000":15247,"2010":13689}}},{"type":"Polygon","arcs":[[-220,-199,-163,-246]],"id":"lyndale","properties":{"city":"minneapolis","key":"lyndale","title":"Lyndale","population":{"2000":7690,"2010":7419}}}]}},"arcs":[[[4936,4265],[0,-1],[0,-50],[0,-60],[0,-1],[0,-9],[-1,-34],[-3,-68],[0,-1],[0,-66],[0,-44],[0,-1],[0,-92],[0,-1],[-1,-18],[0,-12],[-1,-88],[0,-17],[0,-10],[-2,-96],[0,-1]],[[4928,3595],[-3,0],[-89,0],[-2,0],[-32,0],[-62,1],[-75,-1],[-21,0],[-25,0],[-31,0],[-37,0],[-18,0],[-3,0],[-63,0],[-10,0],[-94,0],[-96,0],[-18,0],[-76,0],[-92,0],[-2,0],[-1,0],[-30,0],[-4,0],[-9,0],[-3,0]],[[4032,3595],[0,1],[0,19],[0,17],[2,18],[0,3],[1,4],[1,5],[0,2],[1,4],[2,6],[1,6],[2,4],[3,8],[3,7],[5,14],[7,13],[3,4],[7,12],[3,4],[7,9],[6,8],[3,4],[14,16],[10,9],[1,2],[2,2],[4,3],[14,15],[5,5],[13,14],[2,1],[6,7],[5,4],[12,13],[25,25],[4,4],[22,21],[12,12],[11,12],[11,11],[23,23],[34,34],[1,2],[12,11],[1,2],[19,20],[2,2],[1,1],[3,4],[4,4],[14,17],[4,5],[2,4],[3,4],[7,10],[4,6],[2,4],[3,5],[3,6],[3,6],[1,2],[3,11],[4,13],[1,3],[1,15],[1,5],[0,56],[0,48],[0,4],[0,1],[0,1],[0,6],[1,61],[0,36],[0,1]],[[4419,4376],[25,0],[17,0],[1,0],[6,0],[44,0],[45,0],[2,0],[92,0],[1,0],[95,1],[189,0],[0,-1],[0,-110],[0,-1]],[[5120,5751],[4,-2],[9,-4],[9,-3],[6,-3],[4,-1],[9,-4],[10,-4],[11,-4],[10,-4],[12,-4],[2,-1],[12,-5],[15,-5],[8,-4],[22,-8],[29,-11],[17,-6],[12,-5],[13,-5],[5,-2]],[[5339,5666],[-8,-9],[-10,-10],[-17,-18],[-2,-2],[-2,-2],[-22,-22],[-2,-3],[-1,-1],[-4,-4],[-1,0],[0,-1],[-2,-1],[-3,-3],[-1,-1],[-4,-3],[-10,-8],[-3,-3],[-2,-2],[-3,-2],[0,-1],[-8,-8],[-25,-26],[-9,-9],[-8,-8],[-26,-26],[-29,-30],[-4,-3],[-3,-3],[-1,-1],[-29,-28],[-5,-5],[-29,-27],[-61,-59],[-1,-1],[-58,-59]],[[4946,5277],[-99,35],[-3,1],[0,-1],[-1,0],[-49,-52],[-8,-8],[0,-1],[-21,-20],[-39,-39],[-61,-60],[-60,-59],[-1,-1],[-62,-60],[0,-1],[-1,0],[-1,-1],[-36,-18],[-16,-9],[-15,-7],[-12,-10],[-5,-7],[-1,0],[-2,-3],[-2,-2],[-1,-2],[-1,0],[0,-1],[-1,-3],[-1,-1],[0,-1],[-1,-3],[-2,-4],[-1,0],[-2,-5],[0,-2]],[[4441,4932],[-2,0],[-5,0],[-63,3],[-5,0],[-45,2],[-4,0],[-14,1],[-5,0],[-4,1],[-2,0],[-2,0],[-5,1],[-6,2],[-55,19],[-102,35],[0,1],[-1,0],[-101,34],[-1,0],[-1,0],[-104,38],[-1,0],[-1,0],[-41,15],[-68,23],[-1,1],[-14,3],[-59,14],[-1,1],[-51,54],[-1,1],[-1,1],[-18,17],[-42,38],[-1,1],[0,1],[-1,0],[-3,5],[-6,7],[-12,15],[-11,12],[-1,3],[-12,26],[-2,5],[-4,8],[-1,2],[-5,12],[-4,7],[-1,1]],[[3551,5342],[-4,7],[-15,25],[-8,24],[1,14],[5,24],[1,62],[0,1],[3,0],[1,0],[6,1],[7,1],[5,1],[7,1],[5,1],[18,6],[23,16],[18,14],[2,1],[27,19],[3,2],[16,9],[5,3],[11,7],[11,6],[4,2],[4,3],[5,3],[1,0],[6,2],[6,3],[6,3],[16,6],[7,3],[1,1],[34,8],[0,1],[6,1],[9,2],[12,4],[10,3],[6,2],[1,1],[1,0],[3,1],[18,7],[6,2],[2,1],[3,2],[1,0],[2,1],[39,21],[1,0],[22,13],[9,5],[3,2],[3,2],[28,16],[19,11],[36,21],[1,1],[60,36],[9,5],[17,10],[2,1],[82,50],[4,3],[1,1],[13,-8],[69,-41],[1,0],[39,-25],[4,-3],[13,-8],[22,-14],[2,-1],[2,-1],[13,-8],[75,-39],[1,0],[0,-1],[0,1],[4,2],[22,14],[57,35],[85,49],[1,1],[5,3],[1,0],[36,20],[22,12],[27,15],[10,5],[5,2],[24,9],[11,4],[5,2],[1,0],[1,1],[3,1],[57,20]],[[4836,5894],[1,-1],[5,-3],[3,-2],[1,0],[7,-5],[8,-5],[8,-4],[8,-5],[7,-5],[8,-4],[7,-4],[8,-4],[8,-5],[8,-4],[8,-4],[8,-5],[9,-4],[9,-5],[9,-4],[10,-5],[10,-5],[4,-2],[7,-3],[10,-5],[11,-5],[12,-6],[13,-5],[13,-6],[15,-7],[12,-6],[10,-4],[10,-4],[7,-3],[4,-1],[5,-3]],[[5119,5751],[1,0]],[[6241,5498],[-2,-3],[0,-1],[-1,-2],[-1,-2],[-4,-8],[-1,-3],[-2,-3],[-5,-11],[-2,-3],[0,-1],[-6,-14],[-1,-1],[-12,-26],[-1,-3],[-5,-9],[-9,-14],[-2,-4],[-4,-5],[-11,-14],[-1,-1],[-3,-4],[-2,-2],[-8,-9],[-2,-2],[0,-1],[-1,0],[-2,-2],[-9,-9],[-8,-7],[-1,-1],[-5,-4],[-1,-1],[-1,-1],[-3,-2],[-13,-10],[-9,-7],[-10,-7],[-2,-1],[-10,-7],[-1,-1],[-16,-9],[-9,-6],[-13,-8],[-19,-11],[-5,-3],[-20,-12],[-5,-3],[-7,-4],[-13,-8],[-1,-1],[-1,-1],[-1,0],[-15,-10],[-20,-12],[-1,-1],[-4,-2],[-17,-12],[-1,-1],[-8,-5],[0,-1],[-1,0],[-5,-4],[-3,-2],[-7,-5],[-1,-1],[-7,-6],[-2,-1],[-12,-9],[-9,-8],[-2,-1],[0,-1],[-5,-4],[-13,-11],[-15,-13],[-12,-11],[-2,-2],[-1,-1],[-14,-14],[-11,-11],[-3,-3],[-4,-5],[-1,0],[0,-1],[-10,-10],[-7,-6],[-9,-10],[-16,-16],[-14,-13],[-3,-3],[-2,-2],[-15,-14],[-2,-3],[-10,-12],[-12,-13],[-2,-3],[-2,-2],[-2,-2],[0,-1],[-7,-10],[-4,-6],[-3,-4],[-2,-2],[0,-1],[-3,-3]],[[5649,4932],[-56,32],[-3,1],[-97,36],[-1,0],[-98,34],[-2,1],[-102,36],[-74,28],[-19,7],[-6,2],[-26,9],[-76,25],[0,1],[-3,0],[2,2],[32,33],[4,4],[-1,7],[0,3],[-1,3],[-2,5],[-5,7],[-8,7],[-15,9],[0,1],[-44,15],[-1,0],[-51,19],[-9,3],[-32,11],[-6,3],[-1,0],[-2,1]],[[5339,5666],[1,0],[1,-1],[15,-5],[12,-5],[25,-10],[15,-5],[14,-6],[15,-5],[2,-1],[13,-5],[12,-4],[1,-1],[2,0],[12,-5],[1,0],[10,-4],[11,-4],[11,-3],[4,-1],[0,-1],[7,-2],[11,-3],[10,-3],[10,-4],[1,0],[4,-1],[5,-2],[10,-3],[10,-2],[10,-3],[9,-3],[10,-2],[10,-2],[6,-2],[4,-1],[11,-2],[7,-2],[8,-2],[9,-2],[1,0],[7,-1],[8,-2],[8,-2],[9,-2],[8,-1],[7,-1],[2,-1],[9,-1],[4,-1],[4,-1],[9,-2],[9,-1],[2,-1],[1,0],[7,-1],[9,-1],[4,-1],[1,0],[1,0],[3,-1],[10,-1],[9,-2],[10,-1],[10,-2],[10,-1],[10,-2],[11,-1],[10,-2],[4,0],[7,-1],[10,-1],[1,-1],[11,-1],[12,-1],[12,-2],[12,-1],[15,-2],[8,-1],[8,-1],[9,-1],[9,-1],[8,0],[10,-1],[9,-1],[10,0],[10,-1],[9,0],[9,-1],[9,0],[4,0],[4,0],[2,-1],[14,0],[5,0],[14,-1],[34,-1],[13,0],[11,-1],[13,0],[12,-1],[11,-1],[11,0],[6,-1],[6,0],[6,-1],[3,0],[1,0],[2,0],[5,-1],[2,0],[4,0],[3,0],[2,-1]],[[5900,4712],[5,-5],[13,-12],[14,-13],[17,-13],[23,-20],[14,-16],[13,-22],[27,-47],[21,-34],[17,-22],[14,-17],[7,-8],[4,-5],[0,-1],[28,-33],[45,-56],[12,-14],[-3,-3],[-9,-7],[-4,-4],[-3,-1],[-1,-1],[-13,-10],[-4,-3],[-12,-11],[-3,-2],[-4,-4],[-2,-2],[-6,-4],[-1,-1]],[[6109,4321],[-32,26],[-6,5],[-16,13],[-1,1],[-15,12],[-1,0],[-16,0],[-23,0],[-20,0],[-4,0],[-73,0],[-21,0],[0,-1],[0,-65],[-1,-46],[-84,0],[-9,0],[-1,0],[-4,0],[-81,0],[-6,0],[-2,0]],[[5693,4266],[-90,0],[-3,0],[-84,0],[-10,0],[-3,0],[-89,0],[-3,0],[-94,0],[-2,0],[-21,0],[-31,0],[-3,0],[-37,0],[-5,0],[-65,0],[-1,0],[-22,-1],[-1,0],[-4,0],[-76,0],[-2,0],[-1,0],[-13,0],[-95,0],[-1,0],[-1,0]],[[4419,4376],[0,69],[0,41],[0,2]],[[4419,4488],[1,73],[0,59],[0,70],[0,1]],[[4420,4691],[2,0],[12,-2],[4,0],[12,-1],[15,-2],[1,0],[9,-1],[6,-1],[32,-3],[3,-1],[9,-1],[17,-1],[4,-1],[6,0],[7,0],[6,0],[8,0],[3,0],[14,1],[2,0],[14,0],[2,0],[21,0],[20,0],[35,0],[4,0],[3,0],[17,0],[29,0],[11,0],[180,0],[10,0],[1,0],[127,1],[6,0],[25,0],[53,0],[1,0],[1,0],[54,0],[35,0],[11,0],[7,1],[4,0],[12,1],[8,0],[32,2],[39,3],[1,0],[2,0],[4,0],[2,1],[9,0],[4,1],[7,0],[9,1],[1,0],[14,1],[12,1],[20,1],[2,1],[1,0],[1,0],[3,0],[6,1],[5,0],[9,1],[16,1],[10,1],[12,1],[9,1],[4,1],[10,0],[3,0],[10,1],[12,1],[9,1],[4,0],[16,1],[2,0],[13,1],[1,0]],[[5597,4705],[1,0],[20,1],[19,1],[4,1],[2,0],[13,1],[6,0],[2,0],[7,0],[11,1],[6,1],[5,0],[2,0],[6,0],[6,1],[4,0],[11,0],[2,0],[4,0],[1,0],[8,1],[4,0],[6,0],[1,0],[5,0],[13,1],[9,0],[3,0],[3,0],[7,0],[17,1],[18,0],[3,-1],[4,0],[6,0],[1,0],[4,0],[2,0],[8,0],[22,-1],[2,0],[8,0],[3,0],[14,-1]],[[3028,6127],[-1,0],[-3,-6],[-4,-7],[-5,-11],[-4,-12],[-3,-11],[-3,-12],[-1,-7],[-1,-6],[-1,-10],[0,-5],[-1,-8],[0,-3],[0,-4],[0,-10],[3,-17],[5,-22],[4,-12],[0,-2],[1,-2],[3,-10],[4,-13],[0,-1],[3,-9],[1,-5],[1,-1],[0,-1],[2,-7],[3,-12],[1,-2],[4,-15],[6,-17],[0,-2],[7,-23],[1,-3],[0,-2],[1,-2],[2,-5],[0,-2],[-4,-295],[0,-2]],[[3049,5531],[-112,13],[-24,4],[-74,10],[-41,4],[-3,0],[-117,13],[-141,13],[-45,4],[-1,0],[-120,12],[0,3],[0,56],[0,2],[0,16],[2,8],[1,6],[4,6],[4,5],[1,2],[1,0],[12,9],[1,1],[18,8],[15,4],[35,4],[32,3],[17,3],[17,5],[3,1],[2,1],[12,5],[1,1],[7,4],[12,7],[1,1],[2,1],[9,8],[3,3],[1,1],[7,10],[1,3],[6,29],[2,3],[1,2],[2,5],[1,0],[0,1],[0,5],[0,1]],[[2604,5837],[-1,0],[0,2],[0,3],[0,1],[1,30],[0,1],[4,7],[5,5],[12,11],[-17,8],[-7,6],[-2,3],[-1,1],[-1,1],[-1,42],[1,114],[0,16],[0,23],[0,13],[75,1],[21,0],[10,0],[18,0],[42,1],[61,0],[2,0],[1,0],[32,17],[11,-8],[13,-9],[2,0],[41,0],[10,0],[26,0],[3,0],[47,1],[8,0],[8,0]],[[2220,9992],[0,-111],[0,-1],[-1,-71],[0,-19],[0,-22],[0,-1],[0,-28],[0,-3],[0,-27],[0,-53],[-1,-99],[0,-14]],[[2218,9543],[-83,0],[-2,0],[-100,1],[-62,-1],[-31,0],[-94,0],[-93,0],[-90,1],[-94,0],[-94,0],[-97,0],[-91,0],[-29,0],[-39,1],[-28,0],[-94,0],[-95,0],[-94,0],[-53,-1],[-40,1],[-92,1],[-3,0],[-1,0],[-1,0]],[[718,9546],[-2,112],[0,2],[-1,112],[-1,112],[0,2],[0,20],[-1,42],[0,51],[94,0],[63,0],[20,0],[11,0],[46,0],[46,0],[3,0],[91,0],[19,0],[1,0],[19,0],[77,-1],[35,0],[136,0],[10,0],[47,0],[32,0],[45,0],[51,-1],[1,0],[42,0],[50,0],[2,0],[93,-1],[2,0],[41,0],[23,-1],[2,0],[27,0],[1,0],[1,0],[25,0],[67,-1],[2,0],[49,0],[45,0],[1,0],[93,-1],[81,-1],[12,0],[1,0]],[[3044,8844],[-1,0],[-1,2],[-1,0],[-2,2],[-4,3],[-4,3],[-4,2],[-3,2],[-18,14],[-3,2],[-3,2],[-3,3],[-4,3],[-4,3],[-5,3],[-4,3],[-5,4],[-5,3],[-2,2],[-6,5],[-4,2],[-5,4],[-5,4],[-4,3],[-4,3],[-5,3],[-4,4],[-4,3],[-5,3],[-4,3],[-4,3],[-7,5],[-2,1],[-8,6],[-8,5],[-8,5],[-13,8],[-6,4],[-6,4],[-1,0],[-6,3],[-7,4],[-7,3],[-8,4],[-9,4],[-8,4],[-8,4],[-7,3],[-14,5],[-18,8],[-3,1],[-13,5],[-17,6],[-38,14],[-4,2],[-15,5],[-17,7],[-35,12],[-5,2],[-7,2],[-10,3],[-1,0],[-10,3],[-9,3],[-19,5],[-14,3],[-10,3],[-4,0],[-16,4],[-23,5],[-64,12],[-10,2],[-12,2],[-18,4],[-30,5],[-23,4],[-33,6],[-25,5],[-26,5],[-23,4],[-1,0]],[[2228,9154],[0,2],[0,8],[-1,38],[0,1],[-2,70],[-1,43],[0,5],[0,4],[0,3],[-1,12],[-2,90],[0,6],[-3,107]],[[2220,9992],[95,0],[69,0],[26,0],[1,0],[93,0],[2,0],[3,0],[80,0],[10,0],[1,0],[75,0],[18,0],[4,0],[9,0],[82,0],[3,0],[91,0],[4,0],[22,0],[70,0],[1,0],[46,0],[4,0],[44,0],[1,0],[48,0],[4,0],[42,0],[24,0],[16,0],[1,0],[7,0],[16,-1],[26,0],[5,0],[2,0],[19,0],[29,0],[27,0],[41,0],[1,0],[12,0],[26,0],[1,0],[5,0],[19,1],[67,0],[20,0],[0,-1],[0,-1],[11,-50],[2,-9],[8,-47],[1,-8],[1,-6],[7,-49],[2,-20],[4,-39],[3,-24],[2,-17],[2,-8],[5,-26],[0,-2],[6,-24],[5,-18],[1,-7],[1,-7],[2,-12],[1,-5],[1,-15],[0,-14],[0,-1],[-1,-11],[0,-6],[-2,-15],[0,-5],[-1,-1],[-2,-11],[0,-7],[-1,-19],[-1,-7],[-3,-19],[0,-2],[-1,-6],[-4,-17],[-5,-20],[-1,-7]],[[3575,9429],[-1,0],[-6,0],[-10,0],[-2,0],[-23,0],[-17,0],[-37,0],[-6,0],[-2,0],[-3,0],[-176,0],[-10,0],[-122,0],[-1,-3],[-15,-30],[-27,-68],[-3,-7],[0,-1],[-3,-13],[-1,-2],[-22,-96],[0,-1],[-25,-102],[-2,-10],[-18,-70],[-1,-9],[0,-1],[0,-15],[0,-2],[0,-1],[2,-151],[0,-1],[0,-2]],[[3044,8844],[0,-5],[0,-2],[0,-13],[3,-48],[0,-5],[0,-1],[1,0],[51,-48],[94,-88],[13,-12],[12,-11],[16,-16],[1,0],[13,-18],[0,-1],[37,-51],[5,-7],[74,-103],[2,-4],[17,-23],[64,-89],[0,-1],[1,0]],[[3448,8298],[-22,0],[-8,1],[-50,1],[-41,-1],[-19,0],[-41,0],[-37,0],[-68,0],[-2,0],[-54,0],[-61,0],[-92,0],[-1,0],[-20,1],[-73,0],[-44,0],[-50,1],[-92,0],[-2,0]],[[2671,8301],[-41,1],[-11,0],[-40,0],[-2,0],[-58,0],[-33,1],[-3,0],[-89,0],[-4,0],[-16,0],[-73,0],[-2,0],[-5,0],[-4,0],[-145,2],[-129,1],[-3,0],[-92,0],[-2,0],[-94,1],[-94,1],[-83,0],[-11,0],[-90,1],[-5,0]],[[1542,8309],[-2,61],[-1,51],[0,1],[-1,39],[-2,73],[-2,84],[-1,28],[0,1],[0,17],[-2,76],[-1,19],[1,0],[95,-1],[94,0],[-1,48],[-2,80],[0,2],[-2,106],[0,22],[-44,0],[-3,76],[0,1],[0,18],[0,1],[-1,13],[-1,80],[0,1],[-2,47],[0,6]],[[1664,9259],[1,0],[67,-12],[26,-5],[1,0],[73,-14],[20,-4],[97,-18],[11,-2],[14,-2],[13,-3],[13,-2],[10,-2],[8,-1],[10,-2],[8,-2],[3,0],[8,-2],[9,-1],[10,-2],[12,-3],[13,-2],[10,-2],[10,-2],[9,-2],[6,-1],[6,-1],[1,0],[2,0],[9,-2],[7,-1],[7,-1],[9,-2],[9,-2],[7,-1],[8,-2],[7,-1],[7,-1],[8,-2],[7,-1],[8,-2]],[[4898,7138],[-112,0],[-2,0],[-110,0],[-4,0],[-101,0],[-8,-1],[-3,-4],[0,-9],[0,-1],[-38,0],[-52,0],[0,1],[0,16],[0,1],[0,6],[0,23],[0,2],[0,1],[0,6],[-2,4],[-12,2],[-28,0],[-47,-1],[-2,0],[-20,0],[-96,0],[-2,0],[-70,-2],[-1,0],[-5,0],[-2,0],[-82,-1]],[[4099,7181],[0,5],[0,3],[0,3],[-1,5],[0,5],[-1,3],[0,1],[0,5],[-1,5],[-1,4],[0,2],[0,3],[-1,4],[-1,4],[-1,6],[-1,5],[-1,6],[0,1],[-1,4],[-2,11],[-1,4],[-1,5],[-1,2],[0,2],[-1,7],[-1,6],[-1,6],[-1,8],[-1,8],[-1,8],[-1,8],[-1,9],[0,8],[-1,8],[0,9],[-1,7],[0,7],[0,7],[0,7],[0,9],[0,8],[0,4],[0,4],[0,4],[0,1],[0,3],[1,5],[0,4],[1,9],[0,1],[2,18],[1,7],[0,7],[1,7],[0,4],[0,4],[0,3],[0,1],[0,3],[0,4],[0,3],[0,3],[0,4],[-1,4],[0,4],[0,1],[-1,5],[0,5],[-1,5],[-1,5],[-1,5],[-1,5],[-1,6],[-2,5],[-1,6],[-2,6],[-1,6],[-2,7],[-2,8],[-3,8],[-1,5],[0,1],[-1,3],[-2,5],[-2,5],[-1,5],[-1,0]],[[4052,7627],[4,0],[21,1],[67,1],[1,0],[5,0],[14,0],[15,0],[2,0],[76,0],[4,0],[7,0],[109,0],[2,0],[87,0],[3,0],[1,0],[89,0],[1,0],[1,0],[48,0],[4,0],[56,0],[4,0],[109,0],[3,0],[67,0],[44,0]],[[4896,7629],[0,-62],[1,-67],[0,-1],[-1,-61],[0,-5],[1,-90],[0,-1],[0,-67],[0,-1],[1,-67],[0,-1],[0,-1],[0,-66],[0,-1]],[[721,9435],[2,-1],[1,0],[1,0],[101,-19],[10,-2],[4,0],[15,-3],[99,-19],[149,-27],[10,-2],[148,-28],[10,-2],[18,-3],[30,-5],[62,-12],[2,0],[52,-10],[28,-5],[14,-3],[1,0],[93,-17],[1,0],[29,-6],[48,-9],[15,-3]],[[1542,8309],[-1,0],[-23,0],[-71,0],[-95,0],[-95,0],[-93,0],[-95,0],[-95,0],[-94,1],[-95,0]],[[785,8310],[-1,17],[-1,60],[-2,35],[-3,112],[0,2],[-1,48],[-2,62],[0,2],[-3,108],[0,3],[-2,88],[-1,25],[0,16],[0,1],[-1,5],[0,18],[0,13],[-1,8],[-2,74],[0,9],[-1,0],[-1,0],[-28,0],[0,1],[-1,58],[0,3],[0,2],[-1,11],[0,15],[-1,4],[0,3],[0,11],[-1,29],[-5,133],[0,9],[-1,15],[0,1],[-28,1],[-257,4],[-1,0],[-2,95],[-1,67],[3,-1],[104,-19],[101,-19],[18,-3],[27,-5],[32,-6],[1,0],[-1,9],[0,1]],[[721,9435],[0,7],[-3,79],[0,25]],[[9501,3172],[-2,-34],[0,-12],[0,-10],[-1,-1],[0,-7],[0,-31],[-1,-13],[0,-6],[0,-7],[0,-8],[0,-18],[0,-1],[0,-22],[0,-29],[1,-18],[0,-6],[0,-4],[1,-22],[0,-9],[0,-11],[1,-5],[0,-18],[1,-10],[1,-11],[0,-7],[2,-29],[2,-28],[0,-6],[1,-10],[1,-9],[0,-3],[2,-23],[2,-20],[0,-2],[2,-12],[1,-10],[0,-5],[5,-41],[1,-8],[2,-9],[1,-11],[1,-7],[1,-7],[0,-2],[2,-13],[3,-21],[5,-30],[1,-5],[4,-20],[3,-21],[1,-3]],[[9545,2497],[-114,0],[-13,0],[-48,0],[-2,0],[-26,0],[-2,0],[-36,1],[-17,-1],[-26,-5],[-1,0],[-2,-1],[-19,-7],[-3,-1],[-6,-2],[-1,0],[-18,15],[-11,5],[-17,4],[-85,1],[-12,-2],[-17,-6],[-14,-2],[-45,-1],[-21,0],[-72,-1],[-95,0],[-95,-1],[-94,-1],[-1,0],[-94,0],[-1,0],[-95,-1],[-95,-1],[-95,0],[-93,-1],[-94,-1],[-66,0],[-130,-1],[-71,-1],[-2,0],[-69,0],[-6,0],[-76,-1],[-1,0],[-8,0]],[[7636,2485],[-1,1],[-75,92],[-15,17],[0,1],[-39,47],[-26,32],[-2,2],[-22,27],[-2,3],[0,1],[-1,1],[0,1],[-3,5],[-1,2],[-11,13],[-38,45],[-11,13],[-4,4],[-23,28],[-1,2],[-24,29],[-48,59],[-19,23],[-1,1]],[[7269,2934],[-41,49],[-7,9],[-3,2],[-18,23],[-7,8],[-12,14],[-2,5],[-1,2],[-1,1],[0,1],[-3,6],[-53,63],[-23,26],[-1,1],[-11,15],[-1,0]],[[7085,3159],[10,0],[75,0],[3,0],[10,0],[34,0],[1,0],[69,0],[129,1],[1,0],[55,0],[39,0],[60,-1],[1,0],[45,1],[2,0],[19,0],[34,1],[1,0],[25,0],[76,0],[1,0],[77,1],[10,0],[13,0],[17,0],[78,1],[1,0],[88,0],[6,0],[94,0],[41,1],[53,1],[1,0]],[[8254,3165],[94,0],[94,1],[95,1],[96,0],[1,0],[95,1],[98,0],[96,1],[1,0],[89,1],[92,0],[3,0],[90,1],[57,1],[2,0],[32,0],[46,0],[2,0],[47,0],[39,1],[15,-1],[30,0],[11,0],[5,0],[7,0],[10,0]],[[9545,2497],[0,-2],[2,-11],[4,-20],[3,-14],[1,-3],[2,-14],[1,-5],[6,-27],[7,-33],[-16,-58],[-2,-6],[-9,-34],[0,-1],[-8,-29],[-1,-4],[-13,-58],[-1,-3],[-11,-54],[-1,-3],[-10,-54],[0,-2],[-2,-9],[0,-2],[-1,-10],[-4,-27],[-1,0],[0,-1],[-2,-18],[-1,-6],[-2,-14],[-3,-28],[-1,-8],[-1,-9],[-1,-8],[-1,-10],[-2,-22],[-1,-7],[-1,-10],[-1,-15],[-1,-7],[-1,-23],[-1,-6],[0,-3],[0,-4],[-1,-18],[-1,-16],[0,-5],[0,-2],[-1,-10],[0,-2],[0,-12],[0,-4],[-1,-20],[0,-25],[0,-4],[0,-3],[0,-2],[0,-27],[0,-30],[0,-9],[1,-30],[1,-27],[1,-8],[0,-7],[3,-44],[0,-3],[0,-4],[1,-11],[4,-39],[1,-15],[3,-20],[0,-6],[3,-22],[0,-2],[2,-15],[1,-4],[0,-1],[3,-14],[1,-5],[1,-3],[0,-1],[5,-17],[2,-5],[0,-1],[3,-7],[0,-1],[2,-5],[3,-9],[4,-8],[2,-5],[2,-4],[4,-9],[8,-13],[1,-3],[3,-5],[2,-5],[13,-19],[2,-3],[18,-25],[2,-2],[18,-22],[13,-13],[10,-10],[21,-20],[3,-2],[23,-20],[28,-21],[27,-18],[31,-20],[2,-1],[30,-17],[33,-17],[15,-7],[11,-6],[25,-12],[36,-18],[7,-4],[51,-26],[42,-23],[1,0],[1,-1],[1,0],[1,-1],[-38,1],[-95,1],[-7,0],[-55,0]],[[9804,922],[-30,22],[-28,21],[-27,16],[-8,3],[-3,2],[-2,3],[-3,2],[-4,3],[-6,3],[-3,1],[-3,2],[-3,2],[-5,4],[-4,2],[-4,2],[-3,2],[-4,2],[-3,1],[-4,2],[-3,2],[-4,1],[-5,3],[-6,2],[-4,1],[-3,2],[-4,1],[-5,3],[-5,3],[-5,3],[-5,3],[-6,2],[-5,2],[-6,3],[-5,3],[-6,2],[-5,3],[-6,2],[-6,3],[-5,2],[-5,2],[-6,3],[-6,2],[-7,3],[-5,2],[-5,2],[-6,3],[-26,8],[-28,10],[-6,3],[-6,1],[-6,3],[-8,1],[-5,2],[-7,1],[-6,2],[-6,2],[-6,1],[-7,2],[-7,2],[-6,1],[-5,2],[-8,2],[-8,2],[-5,1],[-6,1],[-33,9],[-9,2],[-9,1],[-26,6],[-20,4],[-30,0],[-5,1],[-4,0],[-53,-1],[-3,1],[-9,5],[-2,1],[-7,4],[-2,2],[-18,9],[-18,10],[-8,5],[-6,3],[-3,2],[-18,11],[-14,8],[-18,11],[-6,4],[-27,19],[-26,18],[-31,23],[-30,23],[-19,15],[-20,14],[-25,19],[-24,17],[-11,8],[-4,2],[-2,2],[-14,11],[-27,18],[-27,18],[-20,15],[-21,13],[-48,33],[-9,6],[-10,6],[-16,9],[-7,5],[-7,4],[-2,1],[-1,0],[-14,8],[-18,9],[-117,58],[-2,1],[-1,1]],[[8455,1601],[-2,1],[-3,1],[-3,2],[-5,3],[-9,6],[-12,8],[-6,4],[-10,7],[-2,1],[-20,15],[-31,23],[-34,27],[-3,2],[-16,13],[-23,20],[-14,11],[-7,5],[-10,9],[-19,18],[-17,15],[-10,10],[-5,7],[-2,3],[-5,7],[-32,35],[-5,5],[-32,37],[-17,20],[-8,10],[-2,2],[-35,43],[-51,61],[-1,2],[-2,2],[-1,1],[0,1],[-36,44],[-55,66],[0,1],[-27,33],[-11,13],[-9,11],[-40,48],[-2,2],[-1,2],[-1,3]],[[7819,2261],[-1,0]],[[7818,2261],[-4,8],[-17,21],[-28,34],[-38,45],[-2,2],[0,1],[-1,1],[-1,0],[-1,2],[-7,8],[-81,100],[-1,0],[-1,2]],[[4020,807],[0,-6],[-1,-64],[0,-109],[0,-33],[0,-26],[0,-31],[0,-19],[0,-13],[0,-7],[1,-32],[0,-13],[0,-1],[0,-2],[0,-3],[1,-25],[0,-10],[0,-29],[0,-8],[0,-10],[0,-1],[0,-1],[-2,-56],[-2,-54],[-1,-23],[0,-1],[0,-1],[-1,-4],[0,-7],[-4,-34],[-3,-29],[0,-2],[-2,-13],[-3,-13],[-1,-10],[0,-5],[0,-13],[0,-5],[0,-7],[0,-15],[0,-52],[0,-4],[0,-8],[0,-3]],[[4002,5],[-27,-1],[-53,0],[-1,0],[-1,0],[-11,0],[-30,0],[-6,0],[-4,0],[-25,0],[-60,-1],[-1,0],[-147,0],[-43,-1],[-186,0],[-379,-2],[-2,0],[-1,0],[-1,0],[-247,2],[-8,0],[-103,0],[-18,0],[-75,1],[-50,0],[-3,0],[-10,0],[-20,0],[-1,0],[-6,0]],[[2483,3],[0,1],[1,1],[0,1],[6,9],[10,15],[6,8],[1,1],[12,15],[0,1],[5,6],[2,2],[1,1],[5,5],[12,14],[6,7],[3,3],[5,5],[8,7],[3,3],[13,10],[10,9],[67,50],[6,5],[123,92],[25,21],[14,15],[3,2],[1,1],[7,7],[10,10],[4,4],[5,6],[1,2],[1,1],[1,1],[0,1],[14,17],[1,2],[7,10],[5,7],[16,23],[4,8],[1,2],[7,15],[15,22],[0,1],[1,1],[5,8],[8,12],[12,23],[25,50],[10,18],[2,6],[19,46],[3,7],[7,22],[4,25],[0,1],[1,5],[0,1],[0,46],[0,21],[-1,46],[2,100],[0,12]],[[3028,902],[1,0],[93,0],[95,1],[20,0],[75,-10],[94,-14],[99,-12],[90,-11],[99,-12],[90,-12],[1,0],[95,-10],[96,-10],[1,-1],[34,-3],[9,-1]],[[8455,1601],[-1,0],[-1,0],[-2,0],[-3,0],[-4,-1],[-7,0],[-18,-1],[-4,-1],[-9,0],[-22,0],[-22,0],[-5,0],[-5,0],[-10,0],[-1,0],[-10,1],[-4,0],[-5,0],[-21,-1],[-2,0],[-26,-1],[-9,0],[-6,0],[-87,-1],[-94,0],[-33,0],[-61,0],[-98,-1]],[[7885,1595],[-1,0],[-103,0],[-29,0],[-79,0],[-105,0],[-93,0],[-1,0],[-96,0],[-94,0],[-89,0],[-5,0],[-91,0],[-499,-1],[-40,-1],[-107,-2],[-6,0],[-3,0],[-84,-2],[-27,-1],[-19,-1],[-106,0],[-16,0],[-28,-1],[-2,0],[-1,0],[-5,0],[-59,1],[-25,0],[-1,0],[-1,0],[-1,0]],[[6069,1587],[0,1],[0,11],[0,2],[0,82],[0,16],[0,1],[0,8],[-1,104],[0,1],[0,4],[1,108],[0,1],[-1,35],[0,74],[0,2],[0,1],[0,46],[0,52],[0,9],[0,5],[0,1],[0,53],[-1,58]],[[6067,2262],[1,0],[93,0],[1,-112],[12,0],[39,0],[20,0],[22,0],[1,0],[2,0],[55,-1],[24,0],[13,0],[54,0],[40,0],[27,0],[66,0],[95,0],[2,0],[8,-1],[82,0],[94,0],[93,0],[14,0],[26,0],[46,-1],[9,0],[19,0],[52,0],[26,0],[1,0],[90,0],[1,113],[24,0],[70,-1],[96,0],[93,0],[95,0],[100,1],[75,0],[4,0],[6,0],[26,0],[11,1],[15,0],[4,0],[2,0],[2,0]],[[4935,1812],[0,-1],[-1,-53],[-1,-53],[0,-4],[0,-1],[0,-2],[-1,-109],[0,-1],[0,-1],[-1,-91],[0,-19],[0,-1],[0,-1],[0,-39],[0,-31],[1,-42],[0,-1],[-1,-49],[-1,-18],[1,-13],[0,-1],[0,-1]],[[4931,1280],[-2,0],[-4,-1],[-10,-1],[-9,0],[-1,0],[-3,0],[-2,0],[-12,-2],[-11,-3],[-10,-2],[-1,0],[-9,-2],[-8,0],[-3,1],[-5,0],[-2,0],[-10,0],[-2,0],[-2,0],[-6,-1],[-1,0],[-3,-1],[-4,0],[-7,-1],[-6,0],[-2,0],[-8,2],[-9,1],[-9,4],[-3,2],[-2,0],[0,1],[-1,0],[-3,1],[-7,4],[-8,6],[-7,5],[-6,5],[-5,4],[-4,3],[0,1],[-1,0],[-6,5],[-7,5],[-10,4],[-1,1],[-9,4],[-1,0],[-7,4],[-9,5],[-1,1],[-5,3],[-10,7],[-7,6],[-1,0],[-3,2],[-5,3],[-5,4],[-2,1],[-1,0],[-2,2],[-1,0],[-1,1],[-1,0],[-6,3],[-6,1],[-2,0],[-11,2],[-2,0],[-10,0],[-21,0],[-5,0],[-13,0],[-1,0],[-1,0],[-1,0],[-1,0],[-9,1],[-1,0],[-4,0],[-6,-1],[-1,0],[-18,0],[-1,0],[-8,0],[-11,1],[-12,0],[-13,-1],[-8,0],[-1,0],[-7,0],[-5,0],[-8,0],[-1,-1],[-9,-1],[-7,-2],[-3,-2],[-1,-1],[-3,-3],[-1,-4],[-2,-4],[-2,-3],[-2,-3],[-4,-5],[-4,-5],[-5,-5],[-3,-2],[-7,-7],[-4,-5],[-1,-1],[-2,-2],[-1,-1],[-3,-2],[-5,-2],[-3,-2],[-1,-3],[1,-4],[-1,-1],[-1,-3],[-3,-2],[-5,-2],[-4,-3],[-3,-4],[-2,-4],[0,-5],[1,-3],[3,-2],[3,-2],[3,-4],[1,-5],[1,-6],[1,-4],[0,-3],[-2,-3],[-2,-3],[-5,-3],[-2,-2],[-3,-2],[-4,-3],[-7,-3],[-10,-1],[-1,0],[-6,0],[-7,1],[-8,1],[-6,2],[-5,3],[-3,1],[-7,2],[-6,2],[-12,2],[-1,0],[-9,1],[-9,0],[-10,-1],[-10,-1],[-3,-1],[-4,-1],[-1,0],[-11,-3],[-11,-3],[0,-1],[-8,-1],[-10,-1],[-7,0],[-3,0],[-12,0],[-4,0],[-4,0],[-7,-2],[-1,0],[-8,-3],[-5,-3],[-1,-4],[-1,-1],[-1,-4],[-2,-4],[-1,-3],[-2,-3],[-4,-4],[-1,-2],[-2,-1],[-3,-2],[-2,-1],[-6,-3],[-6,-1],[-6,-1],[-7,-1],[-1,0],[-1,0],[-5,0],[-5,0],[-2,0],[-4,-2],[-2,-2],[-3,-2],[-4,-5],[-1,0],[-6,-4],[0,-1],[-8,-6],[-3,-3],[-1,-1],[-3,-4]],[[4028,1156],[0,4],[0,11],[1,15],[1,29],[0,10],[1,50],[2,80],[0,5],[0,1],[0,29],[0,107],[1,52],[0,30],[0,4],[0,1],[0,1],[0,21],[1,109],[0,89],[0,6]],[[4035,1810],[14,0],[30,0],[1,0],[97,1],[50,0],[45,1],[95,0],[95,1],[46,0],[48,0],[95,0],[20,0],[74,0],[93,0],[95,-1],[1,0],[1,0]],[[4931,1280],[0,-5],[0,-11],[1,-13],[0,-1],[0,-1],[0,-1],[-1,-110],[0,-1],[0,-26],[1,-86],[0,-69],[1,-44],[0,-1],[-4,-112],[0,-1]],[[4929,798],[-2,0],[-94,0],[-93,-1],[-3,0],[-139,0],[-1,0],[-31,-2],[-196,-12],[-72,-5],[-33,3],[-3,1],[-3,0],[-70,8],[-19,2],[-48,5],[-48,5],[-7,1],[-2,0],[-26,3],[-12,1],[-2,0],[-2,0],[-3,0]],[[4020,807],[0,1],[1,38],[1,53],[1,9],[0,34],[1,10],[0,22],[1,33],[0,31],[0,9],[1,16],[0,24],[1,28],[0,13],[0,7],[0,7],[0,1],[1,13]],[[9018,6294],[0,-1],[0,-8],[0,-25],[0,-6],[-1,-66],[0,-9],[0,-108],[0,-4],[-2,-111],[-2,-70],[0,-16],[0,-10],[0,-18],[-1,-29],[0,-43],[0,-10],[-1,-165],[0,-6],[0,-2],[0,-24],[-1,-163],[0,-6],[0,-1],[-1,-57]],[[9009,5336],[-43,8],[-91,18],[-42,9],[-30,6],[-61,13],[-41,9],[-70,16],[-20,4],[-42,10],[-89,20],[-42,10],[-62,15],[-27,7],[-41,10],[-88,22],[-5,1],[-36,10],[-25,6],[-63,17],[-40,11],[-22,5],[-57,16],[-23,6],[-22,6],[-33,10],[-22,7],[-56,17],[-12,4],[-10,3],[-5,1],[-49,16],[-21,7],[-12,4],[-28,10],[-14,5],[-24,5],[-38,17],[-18,8],[-2,1],[-5,2],[0,1],[-8,3],[-1,0]],[[7569,5712],[-57,28],[-107,49],[-113,52]],[[7292,5841],[-1,1],[-5,2],[-86,40],[-2,1],[-48,22],[-39,18],[-6,3],[-1,1],[-52,25],[-4,1],[-38,18],[-79,36],[-12,7],[-56,25],[-6,3],[-13,6],[-18,8],[0,1],[-1,0],[-2,1],[-2,1],[-20,9],[-6,3],[-56,27],[-12,7],[-18,10],[-25,13],[-39,23],[-8,5],[-31,20],[-4,3],[-13,8],[-7,4],[-10,6],[-7,4],[-14,9],[-11,7],[-15,11],[-5,5],[-26,19],[-9,7],[-21,18],[-1,1]],[[6463,6280],[2,0],[1,0],[73,0],[29,0],[2,0],[16,0],[48,0],[43,0],[35,0],[11,0],[6,0],[15,0],[28,0],[44,1],[3,0],[3,0],[2,0],[1,0],[14,0],[23,1],[7,0],[0,1],[-2,6],[-7,10],[-4,7],[-5,6],[-1,1],[-3,4],[-2,2],[0,1],[-7,8],[-14,13],[-1,1],[-4,4],[-6,5],[-22,19],[-15,13],[-7,9]],[[6769,6392],[9,0],[6,0],[36,0],[1,0],[2,0],[1,0],[94,0],[45,0],[144,0],[44,0],[49,0],[87,0],[81,0],[5,-3],[10,-5],[4,-2],[14,-7],[14,-6],[12,-6],[14,-7],[12,-6],[13,-6],[2,-1],[11,-5],[15,-8],[15,-7],[16,-8],[6,-3],[1,0],[17,-9],[14,-7],[1,0],[2,-1],[5,-3],[9,-4],[18,-9],[3,-1],[3,0],[23,0],[32,-1],[3,1],[29,0],[102,1],[93,1],[46,0],[49,1],[46,0],[49,0],[50,1],[45,0],[95,1],[48,1],[46,0],[45,1],[49,0],[187,2],[1,0],[177,3],[8,0],[54,1],[123,2],[5,1],[2,0],[6,0],[1,0]],[[6406,5470],[6,-1],[1,0],[6,-2],[6,-1],[6,-2],[6,-2],[6,-2],[5,-2],[8,-2],[8,-3],[7,-3],[6,-2],[2,0],[1,-1],[5,-2],[7,-3],[6,-2],[6,-3],[6,-3],[6,-3],[3,-1],[2,-1],[4,-2],[2,-1],[5,-3],[4,-2],[5,-3],[4,-2],[5,-3],[4,-3],[4,-2],[4,-3],[4,-3],[3,-3],[4,-3],[4,-3],[4,-3],[4,-3],[3,-4],[4,-3],[5,-4],[4,-5],[4,-4],[4,-4],[4,-4],[3,-4],[4,-4],[3,-4],[3,-3],[3,-4],[2,-4],[3,-4],[2,-4],[3,-3],[2,-4],[2,-4],[2,-4],[2,-3],[1,-4],[2,-3],[1,-4],[2,-3],[1,-4],[1,-4],[1,-3],[1,-4],[1,-4],[1,-4],[1,-3],[1,-4],[1,-4],[1,-4],[0,-4],[0,-2],[0,-1],[1,-4],[0,-3],[1,-4],[0,-4],[0,-3],[0,-4],[0,-4],[0,-2],[0,-3],[-1,-2],[0,-1],[0,-1],[0,-2],[-1,-6],[-3,0],[-13,0],[-49,0],[-4,0],[-1,0],[-97,-1],[-29,0],[-1,0],[-1,1],[-40,37],[-9,7],[-50,26],[-7,4],[-8,3],[-8,1],[-10,1],[-22,0],[-105,1],[-18,0],[-7,-17],[-7,-27],[2,-38],[0,-1],[0,-51],[0,-2],[8,-67],[1,-6],[1,-7],[0,-2],[0,-1],[0,-3],[1,-7],[4,-44],[-1,-64],[272,-2],[135,26],[49,9],[72,13],[1,-1],[1,-1],[2,-3],[2,-3],[1,0],[3,-3],[3,-3],[3,-3],[3,-3],[3,-3],[3,-2],[4,-3],[3,-3],[4,-3],[4,-3],[4,-2],[4,-3],[4,-3],[4,-3],[5,-2],[3,-2],[3,-2],[4,-2],[4,-2],[3,-2],[4,-2],[3,-2],[4,-2],[4,-1],[4,-2],[3,-2],[4,-1],[0,-1],[4,-1],[3,-2],[4,-1],[4,-1],[3,-2],[4,-1],[4,-1],[4,-1],[3,-1],[4,-2],[4,-1],[5,-1],[4,-1],[4,-1],[4,-1],[5,-1],[5,-1],[4,-1],[5,-1],[5,-1],[7,-2],[7,-1],[7,-1],[8,-1],[9,-2],[10,-1],[8,-1],[4,-1],[5,0],[6,-1],[5,0],[7,-1],[6,0],[7,0],[7,-1],[19,-1],[6,0],[5,0],[6,-1],[6,0],[6,-1],[5,0],[8,-1],[10,-1],[10,-1],[10,-2],[11,-1],[12,-2],[15,-2],[8,-1],[10,-2],[15,-2],[15,-2],[14,-3],[15,-2],[13,-2],[14,-3],[13,-2],[9,-2],[4,0],[2,-1],[9,-1],[11,-3],[11,-2],[4,-1],[7,-1],[10,-2],[2,-1],[27,-6],[13,-2],[12,-3],[7,-1],[6,-2],[6,-1],[6,-2],[6,-1],[6,-2],[6,-1],[5,-2],[5,-1],[5,-2],[3,0],[2,-1],[5,-2],[5,-1],[5,-1],[5,-2],[4,-1],[6,-2],[5,-2],[6,-2],[5,-2],[6,-2],[6,-3],[5,-2],[6,-2],[6,-2],[6,-3],[6,-3],[7,-2],[4,-2],[5,-2],[5,-2],[4,-3],[4,-2],[4,-2],[4,-2],[4,-2],[3,-1]],[[7568,4763],[1,-1],[4,-2],[2,-1],[1,-1],[1,0],[4,-3],[5,-2],[4,-2],[0,-1],[4,-2],[4,-2],[5,-3],[4,-3],[1,0],[4,-3],[4,-2],[6,-4],[5,-4],[6,-3],[7,-5],[11,-7],[3,-2],[1,-1],[6,-4]],[[7661,4705],[-4,-2],[-9,-4],[-1,0],[-10,-4],[-17,-6],[-24,-10],[-1,-1],[-19,-7],[-4,-1],[-1,-1],[-16,-6],[-1,-1],[-9,-3],[-1,-1],[-60,-23],[-30,-10],[-11,-4],[-10,-3],[-16,-4],[-24,-6],[-26,-5],[-3,-1],[-24,-4],[-23,-3],[-7,-1],[-19,-2],[-21,-2],[-33,-1],[-27,-1],[-40,0],[-26,1],[-41,0],[-1,0],[-2,0],[-14,0],[-5,0],[-2,0],[-69,0],[-95,0],[-20,0],[-8,0],[-53,0],[-52,0],[-121,0],[-57,0],[-43,0],[-18,0],[-25,0],[-40,0],[-3,1],[-36,2],[-8,0],[-23,2],[-31,3],[-18,3],[-6,1],[-20,3],[-18,3],[-4,1],[-1,0],[-8,2],[-1,0],[-13,3],[-5,1],[-4,1],[-5,1],[-20,4],[-1,0],[-23,7],[-4,1],[-13,4],[-5,2],[-12,3],[-48,16],[-34,12],[-1,0],[-22,8],[-13,4],[-6,2],[-6,2],[-17,6],[-2,0],[-24,7],[-18,5],[-7,1],[-6,1],[-22,4],[-14,2],[-3,1],[-8,1],[-25,2],[-5,0],[-14,1],[-1,0]],[[5597,4705],[-3,22],[0,3],[0,4],[0,1],[-1,5],[-1,8],[0,2],[-1,5],[0,7],[0,1],[0,14],[0,4],[0,2],[0,1],[1,1],[0,3],[1,2],[0,2],[0,1],[3,12],[0,2],[0,2],[1,0],[0,3],[2,4],[2,7],[2,4],[2,4],[1,2],[1,2],[0,2],[1,1],[1,2],[2,7],[1,1],[0,1],[1,2],[5,12],[0,1],[4,8],[0,1],[3,7],[1,1],[6,15],[1,4],[1,2],[5,11],[2,4],[2,3],[0,1],[6,11]],[[6241,5498],[5,0],[1,0],[5,-1],[5,0],[5,-1],[4,0],[1,-1],[2,0],[3,0],[3,-1],[2,0],[5,-1],[5,0],[4,-1],[18,-3],[4,-1],[6,-1],[3,0],[7,-1],[9,-2],[9,-1],[7,-2],[1,0],[8,-1],[7,-2],[7,-1],[1,0],[2,-1],[1,0],[5,-1],[1,0],[1,0],[5,-1],[3,-1],[4,-1],[6,-1],[0,-1]],[[9009,5336],[0,-3],[0,-6],[0,-28],[0,-36],[0,-11],[-1,-3],[0,-1],[0,-2],[0,-7],[0,-1],[0,-29],[0,-29],[0,-4],[-1,-69],[0,-3],[0,-74],[0,-17],[-1,-97],[-1,-97],[0,-1],[0,-8],[0,-71],[0,-17],[0,-3],[-1,-112],[-1,-91],[0,-21],[0,-52],[0,-36],[1,-71],[0,-28],[0,-5],[0,-43],[0,-17],[0,-3],[0,-17],[0,-1],[0,-106],[1,-40],[0,-20],[0,-33],[0,-2],[0,-27],[0,-3],[0,-36],[0,-2],[0,-1],[0,-2],[0,-18],[0,-25],[0,-11],[0,-4],[0,-4],[0,-2]],[[9005,3886],[-5,2],[-3,2],[-10,4],[-16,7],[-17,7],[-16,8],[-18,8],[-16,7],[-12,6],[-13,6],[-14,7],[-13,6],[-14,7],[-6,3],[-8,4],[-14,7],[-14,7],[-14,7],[-14,8],[-15,7],[-16,9],[-17,9],[-16,9],[-9,4],[-9,5],[-5,4],[-12,6],[-18,10],[-14,8],[-5,3],[-2,1]],[[8630,4074],[-2,1],[-4,2],[-11,7],[-16,9],[-16,9],[-17,10],[-18,11],[-34,20],[-34,19],[-30,18],[-19,11],[-5,3],[-26,15],[-10,6],[-13,8],[-21,12],[-16,9],[-17,10],[-38,21],[-18,11],[-18,10],[-8,5],[-7,4],[-10,6],[-10,5],[-9,6],[-8,5],[-8,5],[-8,5],[-9,6],[-8,5],[-9,6],[-9,6],[-9,6],[-9,6],[-9,7],[-10,6],[-10,7],[-9,7],[-11,8],[-12,8],[-11,8],[-13,9],[-13,10],[-14,11],[-34,25],[-6,4],[-11,9],[-12,9],[-12,9],[-28,22],[-15,11],[-7,6],[-7,5],[0,1],[-3,2],[-3,2],[-6,4],[-10,8],[-12,9],[-12,8],[-12,8],[-11,8],[-12,8],[-11,8],[-11,8],[-11,7],[-10,7],[-11,7],[-10,7],[-1,1],[-8,5],[-6,4],[-3,2],[-5,3],[-4,3],[-12,8],[-2,1],[-6,4],[-13,8],[-14,10],[-2,1]],[[7568,4763],[0,67],[-1,44],[0,1],[0,4],[0,77],[1,3],[-1,15],[0,13],[0,40],[0,10],[0,64],[1,63],[0,3],[0,3],[1,24],[0,45],[1,0],[1,59],[0,1],[-2,29],[-1,42],[1,2],[4,6],[0,1],[0,1],[-1,68],[0,14],[0,1],[0,9],[0,2],[0,14],[-1,47],[0,8],[0,38],[0,2],[-1,22],[0,94],[0,1],[0,5],[0,2],[-1,2],[0,3]],[[6406,5470],[13,15],[21,23],[35,37],[6,6],[59,64],[20,21],[100,-33],[3,-1],[100,-33],[4,-1],[15,-5],[31,-10],[2,0],[5,-2],[4,-1],[3,-2],[11,-3],[3,-1],[25,-9],[5,-2],[50,-16],[20,-6],[28,-10],[1,0],[0,1],[9,9],[48,50],[1,0],[6,5],[6,7],[26,27],[12,13],[9,9],[0,1],[12,12],[7,8],[38,40],[58,61],[56,60],[1,1],[30,33],[3,3]],[[1549,7634],[47,-1],[10,0],[36,0],[41,0],[52,0],[2,0],[93,-1],[1,0],[47,0],[22,0],[23,0],[1,0],[69,-1],[25,0],[13,0],[47,0],[29,-1],[5,0],[27,0],[47,0],[21,0],[94,-1],[88,0],[5,0],[44,-1],[50,0],[92,0]],[[2580,7628],[0,-1],[1,-111],[0,-1],[0,-1],[0,-110],[0,-112],[0,-77],[3,-15],[7,-18],[0,-1],[1,-1],[5,-10],[1,-1],[0,-1],[-1,-58],[0,-1],[0,-5],[1,-62],[0,-1],[0,-69],[0,-11],[0,-7],[-3,-50],[0,-1],[2,-76],[0,-1],[0,-1],[0,-21],[1,-47],[0,-1]],[[2598,6756],[-7,0],[-5,0],[-2,0],[-100,2],[-58,0],[-55,0],[-2,0],[-43,0],[-59,15],[-30,6],[-2,1]],[[2235,6780],[-1,0]],[[2234,6780],[-1,0],[-36,7],[-3,0],[-39,1],[-4,0],[-12,-2],[-16,-3],[-10,-1],[-2,0],[-26,-4],[-28,0],[-3,0],[-10,0],[-24,0],[-36,6],[-6,0],[-1,1],[-5,0],[-4,1],[-7,1],[-6,1],[-6,2],[-5,1],[-19,5],[-16,3],[-26,5],[-43,12],[-6,2],[-1,0],[-3,1],[-5,3],[-11,4],[-5,3],[-2,1],[-5,2],[-11,5],[-1,0],[-8,8],[-19,17],[-14,16],[-2,4],[-2,3],[-2,3],[-2,4],[-1,2],[0,1],[-2,3],[-1,3],[-1,3],[-1,3],[-1,3],[0,1],[-2,3],[-2,6],[-1,1],[-1,18],[-1,9],[-1,1],[-6,6],[-3,3],[-4,5],[-8,5],[-7,4],[-1,1],[-144,76],[-2,1],[-1,0],[-15,8],[-25,14],[-1,1],[-54,29],[-1,0],[-152,82],[-1,1],[-35,18],[-5,4],[-23,17],[-6,4],[-2,2],[-7,5],[-28,29],[-7,7],[-5,6],[-14,16],[-3,4],[-1,0],[-57,52],[-31,28],[0,1],[-33,31],[-1,1],[-5,4],[-55,47],[-3,2],[-16,15],[-3,2],[-1,1],[-1,1],[-34,26],[-1,1],[-16,13],[-50,41],[-44,40],[-20,22],[-1,1],[-1,1]],[[792,7627],[0,2],[0,10]],[[792,7639],[2,0],[2,0],[4,-1],[6,0],[6,-1],[16,-2],[7,0],[1,0],[30,-1],[7,0],[2,0],[4,0],[59,0],[11,0],[17,0],[15,0],[1,0],[94,1],[1,0],[92,-1],[1,0],[79,0],[17,0],[93,-1],[1,0],[94,1],[45,0],[9,0],[40,0],[1,0]],[[4099,7181],[1,-6],[0,-5],[0,-6],[0,-5],[0,-6],[1,-6],[-1,-5],[0,-6],[0,-5],[0,-6],[0,-6],[0,-5],[-1,-6],[0,-8],[-1,-8],[-1,-8],[0,-1],[-1,-7],[-1,-8],[-1,-8],[-1,-7],[-1,-1],[-1,-8],[-1,-7],[-2,-7],[-2,-7],[-2,-8],[-2,-8],[-2,-9],[-3,-10],[0,-2],[-3,-8],[-1,-4],[-1,-5],[-2,-4],[-1,-4],[-2,-5],[-2,-4],[-2,-5],[-2,-5],[-2,-4],[-2,-5],[-2,-5],[-3,-5],[-5,-10],[-10,-20],[-4,-8],[-4,-8],[-3,-7],[-1,-1],[-2,-4],[-2,-5],[-2,-4],[-1,-4],[-2,-3],[-2,-4],[-1,-4],[-1,-4],[-2,-4],[-1,-4],[-1,-5],[-1,-4],[-1,-4],[-1,-4],[-1,-4],[-1,-4],[0,-3],[-1,-4],[0,-4],[0,-4],[0,-5],[0,-4],[0,-2],[0,-3],[0,-4],[0,-4],[0,-3],[1,-8],[0,-4],[0,-1],[0,-1],[0,-1],[0,-1]],[[4003,6748],[-3,0],[-3,1],[-4,0],[-10,0],[-54,2],[-20,0],[-1,0],[-4,0],[-4,0],[-38,2],[-4,0],[-25,0],[-4,0],[-1,0],[-1,0],[-6,0],[-63,0],[-3,0],[-13,0],[-112,0],[-1,0],[-120,1],[-1,0],[-31,0],[-4,0],[-27,1],[-15,0],[-2,0],[-53,0],[-25,0],[-26,0],[-7,0],[-16,0],[-25,0],[-53,0],[-62,0],[-52,0],[-55,1],[-4,0],[-5,0],[-52,0],[-52,-1],[-5,0],[-12,0],[-99,1],[-1,0],[-2,0],[-112,0],[-32,0],[-81,0]],[[2580,7628],[1,-1],[1,0],[93,0]],[[2675,7627],[75,0],[17,0],[1,0],[13,0],[81,-1],[53,0],[40,0],[42,0],[8,0],[12,0],[32,-1],[23,0],[31,1],[14,0],[46,0],[2,0],[55,0],[24,0],[35,0],[3,0],[74,0],[34,0],[2,0],[44,0],[4,0],[13,0],[14,0],[5,0],[34,0],[1,0],[35,0],[43,0],[9,0],[13,0],[27,0],[6,0],[84,0],[12,0],[4,0],[112,0],[69,0],[3,0],[18,0],[18,0],[2,0],[40,1],[1,0],[16,0],[6,0],[17,0],[3,0],[1,0],[2,0],[2,0],[1,0],[1,0]],[[2234,6780],[0,-1],[-1,0],[-1,-1],[-12,-7],[-12,-16],[-2,-7],[-1,-2],[0,-1],[0,-1],[-1,0],[0,-3],[-1,-5],[-1,-4],[0,-1],[-1,-82],[-56,0],[-37,0],[2,-68],[0,-1],[-2,-54],[-1,-14],[-92,0],[0,-65],[0,-1],[1,-67],[0,-1],[0,-78],[1,-19],[-14,0],[-80,0],[-1,0],[-93,0],[-93,0],[-94,0],[-92,0],[-1,0],[0,-3],[-1,-58],[-1,-50],[0,-1],[-1,-113],[-1,-112],[0,-1],[-1,-94],[0,-2],[-1,-7],[0,-1]],[[1543,5839],[-4,0],[-11,0],[-83,0],[-3,0],[-45,0],[-6,0],[-6,0],[-6,0],[-5,0],[-5,0],[-9,0],[-2,0],[-6,0],[-5,-1],[-2,0],[-1,0],[-11,0],[-11,0],[-1,0],[-5,-1],[-12,0],[-63,-5],[-9,0],[-32,-2],[-15,-1],[-5,-1],[-4,0],[-7,0],[-59,-5],[-12,-1],[-9,-1],[-7,0],[-6,-1],[-7,0],[-7,-1],[-33,-3],[-4,0],[-26,-2],[-18,-1],[-16,0],[-12,-1],[-10,0],[-2,0],[-9,0],[-14,-1],[-1,0],[-2,0],[-53,0],[-19,0],[-4,1],[-4,0],[-28,1],[-9,0],[-10,0]],[[788,5813],[0,1],[0,12],[0,12],[0,17],[0,154],[0,2],[0,17],[0,10],[0,21],[1,114],[0,111],[0,2],[0,48],[0,66],[1,111],[0,3],[0,111],[0,1],[0,1],[0,53],[0,2],[0,40],[0,16],[0,1],[0,1],[0,6],[0,42],[0,61],[0,1],[0,3],[0,16],[0,3],[1,30],[0,6],[0,11],[0,1],[0,12],[0,44],[1,207],[0,3],[0,29],[0,48],[0,144],[0,2],[0,2],[0,32],[0,17],[0,58],[0,4],[0,17],[0,81],[0,6],[0,1]],[[2234,6780],[1,0],[-1,0]],[[4003,6748],[0,-2],[1,-1],[0,-6],[2,-18],[1,-4],[2,-19],[1,-12],[1,-8],[1,-7],[1,-7],[1,-7],[1,-11],[2,-9],[1,-5],[1,-5],[1,-4],[0,-4],[1,-1],[0,-5],[1,-3],[0,-1],[2,-4],[1,-5],[1,-4],[1,-4],[1,-4],[0,-1],[1,-3],[2,-8],[2,-7],[2,-6],[2,-6],[1,-5],[1,-1],[2,-6],[1,-4],[1,-1],[1,-5],[2,-6],[2,-5],[2,-5],[1,-1],[1,-4],[2,-5],[2,-4],[2,-5],[2,-5],[2,-4],[2,-4],[2,-5],[1,-2],[1,-2],[2,-4],[3,-4],[2,-4],[2,-4],[2,-4],[2,-3],[3,-3],[2,-4],[4,-6],[3,-5],[4,-5],[3,-5],[4,-5],[3,-5],[4,-4],[3,-5],[2,-2],[6,-6],[3,-4],[4,-4],[3,-4],[4,-3],[3,-4],[4,-2],[0,-1],[3,-2],[1,-1]],[[4147,6375],[-4,-1],[-14,-4],[-3,-1],[-60,-16],[-6,-1],[-1,-1],[-1,0],[-6,-1],[-1,-1],[-19,-5],[-9,-2],[-43,-11],[-1,0],[-32,-5],[-73,-10],[-9,-1],[-20,-1],[-11,-1],[-12,0],[-24,-1],[-4,0],[-57,0],[-1,0],[-15,0],[-64,-1],[-107,-1],[-13,0],[-27,1],[-84,2],[-49,-1],[-9,0],[-12,0],[-12,0],[-14,0],[-1,0],[-14,0],[-34,-1],[-1,0],[-14,0],[-7,0],[-4,-2],[-11,-7],[-26,-16],[-7,-4],[-28,-17],[-19,-12],[-9,-5],[-10,-6],[-3,-2],[-7,-4],[-2,-1],[-12,-8],[-11,-9],[-13,-9],[-12,-11],[-12,-12],[-7,-7],[-13,-15],[-11,-15],[-10,-15],[-2,-3],[-2,-4]],[[2604,5837],[-4,0],[-1,0],[-1,0],[-14,0],[-104,0],[-17,0],[-170,0],[-14,0],[-126,1],[-39,1],[-10,0],[-75,0],[-1,0],[-98,0],[-8,0],[-97,0],[-15,0],[-49,0],[-31,0],[-87,0],[-5,0],[-36,0],[-29,0],[-28,0],[-2,0]],[[3049,5531],[0,-30],[0,-2],[1,-78],[0,-1],[0,-1],[0,-1],[0,-3],[0,-1],[0,-5],[0,-7],[0,-4],[1,-14],[0,-3]],[[3051,5381],[-10,0],[-37,0]],[[3004,5381],[-75,0],[-17,1],[-2,0],[-264,0],[-285,1],[-197,-55],[-12,-3],[-5,-1],[-5,-1],[-21,-5],[-23,-2],[-9,-1],[-16,-1],[-21,0],[-22,0],[-6,0],[-18,3],[-22,3],[-18,3],[-4,1],[-21,6],[-20,6],[-8,3],[-11,5],[-19,8],[-2,0],[-9,5],[-12,2],[-11,-1],[-8,-1],[-9,-3],[-6,-2],[-4,-2],[-9,-2],[-1,0],[-11,-1],[-10,0],[-4,0],[-11,2],[-12,3],[-7,3],[-1,3],[-2,3],[-3,6],[0,6],[-1,3],[-1,4],[0,1],[-3,7],[-3,4],[-5,6],[-9,4],[-11,5],[-14,3],[-10,1],[-12,0],[-5,0],[-23,-1],[-25,-1],[-17,2],[-15,2],[-14,4],[-20,3],[-4,1],[-14,2],[-4,0],[-18,3],[-4,1],[-5,0],[-4,1],[-6,0],[-13,2],[-1,0],[-14,1],[-6,-1],[-3,-2],[-1,-1],[-1,0],[-1,0],[-12,-5],[-17,-1],[-7,1],[-6,0],[-17,2],[-18,3],[-12,4],[-24,5],[-20,3],[-30,6],[-6,2],[-27,6],[-14,4],[-23,10],[-16,9],[-14,7],[-11,7],[-10,7],[-13,7],[-3,1],[0,1],[-2,1],[-3,4],[-3,4],[-2,3],[-1,0],[-3,4],[-3,5],[-2,4],[-3,5],[-2,4],[-3,5],[-6,12],[-2,2],[-3,6],[-4,6],[-4,7],[-4,7],[-4,6],[-3,5],[-4,7],[-2,3],[-2,4],[-1,0],[-3,0],[-9,0],[-3,1],[-107,0],[-2,0],[-56,0],[-37,0],[-14,0],[-28,-1],[-52,0]],[[787,5610],[0,1],[0,1],[0,149],[0,3],[1,43],[0,6]],[[4441,4932],[-2,-6],[-3,-7],[-1,-5],[-1,-1],[-8,-31],[-11,-41],[-1,-19],[0,-1],[-1,-25],[0,-1],[0,-8],[0,-5],[0,-1],[0,-3],[2,-14],[1,-16],[1,-11],[0,-4],[0,-2],[1,-11],[1,-5],[0,-4],[1,-12],[0,-2],[0,-2],[0,-1],[0,-3]],[[4420,4691],[-11,2],[-12,2],[-2,0],[-7,1],[-3,1],[-7,1],[-2,0],[-3,1],[-20,3],[-4,1],[-13,2],[-11,2],[-17,3],[-10,2],[-1,0],[-1,0],[-8,2],[-3,1],[-3,0],[-6,1],[-4,1],[-7,2],[-14,2],[-2,1],[-3,0],[-1,0],[-7,1],[-5,1],[-18,3],[-9,1],[-13,2],[-12,2],[-10,1],[-16,1],[-14,2],[-7,0],[-1,0],[-12,1],[-4,0],[-4,0],[-2,0],[-10,1],[-1,0],[-7,0],[-28,1],[-1,0],[-1,0],[-10,0],[-1,0],[-19,0],[-17,-1],[-5,0],[-1,0],[-9,-1],[-5,0],[-17,-1],[-6,0],[-8,-1],[-3,0],[-4,0],[-4,-1],[-1,0],[-1,0],[-18,-2],[-1,0],[-12,-1],[-18,-3],[-3,0],[-2,0],[-5,-1],[-31,-6],[-1,0],[-2,0],[-3,-1],[-3,0],[-10,-2],[-19,-4],[-19,-4],[-9,-2],[-12,-3],[-72,-16],[-5,-1],[-13,-3],[-1,0],[-9,-2],[-37,-9],[-59,-13],[-33,-7],[-64,-15],[-58,-13],[-19,-4],[-1,0],[-27,-9],[-17,-5],[-16,-4],[-20,-5],[-1,0],[-21,-4],[-32,-5],[-1,0],[-9,-1],[-36,-2],[-2,-1],[-1,0],[-46,0],[-2,1],[-1,0],[-35,2],[-15,2],[-25,1],[-2,1],[-27,1],[-1,0],[-13,0],[-9,-1],[-3,0]],[[3051,4593],[0,14],[0,1],[-1,16],[0,9],[0,10],[-1,18],[0,3],[-1,2],[0,1],[0,3],[0,3],[0,1],[-1,7],[0,1],[0,1],[-1,38],[0,14],[-1,29],[0,2]],[[3045,4766],[0,10],[0,6],[0,15],[0,4],[0,1],[0,18],[0,12],[0,2],[0,20],[0,3],[0,17],[0,1],[0,28],[0,5],[1,26],[0,3],[0,6],[0,1],[3,113],[0,7],[0,1],[0,5],[-2,58],[0,6],[-1,12],[0,8],[1,3],[1,7],[0,6],[-1,4],[-2,34],[2,28],[0,11],[0,2],[0,1],[0,1],[1,2],[0,1]],[[3048,5254],[3,0],[2,1],[30,1],[6,1],[1,0],[62,4],[13,1],[52,3],[3,0],[6,0],[3,1],[31,2],[56,3],[63,4],[16,1],[11,1],[4,1],[6,1],[19,3],[4,1],[2,1],[11,2],[12,3],[5,2],[17,6],[21,10],[6,3],[1,1],[13,8],[18,16],[6,7]],[[4419,4488],[-2,0],[-8,0],[-6,0],[-11,0],[-21,0],[-1,0],[-64,0],[-19,0],[-11,0],[-2,0],[-92,0],[-6,0],[-38,0],[-51,0],[-49,0],[-45,0],[-91,0],[-4,0],[-44,0],[-4,0],[-44,0],[-113,0],[-10,0],[-1,0],[-99,0],[-13,0],[-20,0],[-2,0],[-121,0],[-22,-1],[-45,1],[-26,0],[-3,0],[-3,0],[-46,0],[-44,0],[-3,0],[-45,0],[-47,0],[-2,0],[-59,0],[-4,0],[-28,0],[-1,0]],[[3049,4488],[0,1],[1,6],[1,26],[0,3],[2,28],[-1,22],[0,10],[-1,9]],[[9804,922],[-1,0],[-32,0],[-60,0],[-14,0],[-7,0],[-6,0],[-42,0],[-8,0],[-1,0],[-18,0],[-5,0],[-35,0],[-41,0],[-1,0],[-140,0],[-5,0],[-13,0],[-44,0],[-125,-1],[-84,0],[-12,0],[-95,0]],[[9015,921],[-93,0],[-96,0],[-95,0],[-47,0],[-48,0],[-95,0],[-93,0],[-95,-1],[-94,0],[-94,0],[-95,0],[-95,0],[-94,0]],[[7881,920],[0,1],[0,55],[0,1],[1,55],[0,1],[0,80],[0,27],[0,5],[0,1],[0,21],[0,35],[1,56],[0,1],[0,48],[0,7],[1,57],[0,1],[1,110],[0,1],[2,98],[0,3],[-2,11]],[[6058,814],[-4,-138],[0,-1],[0,-1],[0,-4],[1,-24],[0,-1],[2,-5],[4,-14],[2,-7],[0,-3],[1,-4],[1,-1],[0,-1],[7,-20],[3,-8],[0,-1],[2,-14],[0,-3],[0,-6],[1,-2],[0,-12],[0,-1],[0,-10],[-3,-54],[0,-21],[0,-11],[0,-11],[0,-3],[0,-3],[0,-4],[0,-1],[0,-3],[0,-3],[0,-13],[0,-3],[-1,-57]],[[6074,346],[-6,0],[-2,0],[-21,0],[-1,0],[1,40],[1,43],[1,7],[-11,0],[-2,0],[-9,0],[-25,0],[-2,0],[1,17],[-140,0],[-95,-1],[-19,0],[-70,0],[-5,0],[-96,0],[-50,0],[-1,-42],[-53,0],[-2,-102],[1,0],[51,0],[-1,-9],[-1,-30],[2,0],[1,0],[1,0],[0,-15],[0,-7],[-1,-9],[2,0],[17,0],[1,0],[1,0],[3,0],[18,0],[3,0],[10,0],[0,-10],[-1,-42],[-1,-10],[0,-5],[-1,-39],[0,-7],[1,0],[1,0],[93,1],[-3,-54],[-2,-55],[-1,-4],[2,0],[35,0],[106,0],[-1,-2],[0,-2],[0,-1],[-24,0],[-116,0],[-9,0],[-96,0],[-23,0],[-69,0],[-35,0],[-43,0],[-2,0],[-2,0],[-6,0],[-25,0],[-5,0],[-9,0],[-3,0],[-4,0],[-1,0],[-2,0],[-14,0],[-42,0],[-63,0],[-28,0],[-89,0],[-83,0],[-9,0],[-57,0],[-26,0],[-8,0],[-63,0],[-92,0],[-13,0],[-12,0],[-183,0],[-1,0],[-2,0],[-48,0],[-80,-1],[-63,0],[-95,-1],[-1,0],[-53,0],[-57,-1],[-20,0],[-69,0],[-40,0],[-2,0],[-1,0],[-1,0],[-7,0],[-5,0],[-1,0]],[[4929,798],[94,1],[93,0],[94,1],[36,-1],[57,0],[1,0],[92,1],[3,0],[91,-1],[2,0],[92,1],[15,3],[28,10],[3,1],[99,0],[213,0],[81,0],[35,0]],[[9005,3886],[33,-9],[6,-2],[35,-11],[3,-1],[37,-14],[11,-4],[20,-9],[10,-4],[1,-1],[20,-9],[6,-3],[19,-9],[5,-3],[3,-1],[6,-3],[3,-2],[23,-13],[1,-1],[4,-2],[24,-15],[3,-2],[23,-15],[0,-1],[10,-7],[16,-13],[7,-5],[18,-16],[21,-20],[1,-1],[1,0],[20,-23],[19,-23],[1,-2],[5,-6],[10,-15],[2,-3],[13,-21],[1,-2],[1,-3],[6,-12],[4,-9],[5,-12],[2,-4],[6,-16],[1,-1],[1,-3],[5,-14],[6,-17],[7,-22],[1,-4],[3,-13],[1,-4],[1,-2],[3,-15],[1,-4],[3,-17],[0,-3],[1,-6],[2,-9],[2,-18],[0,-5],[2,-15],[0,-1],[0,-2],[0,-5],[0,-8],[1,-3],[0,-2],[0,-18],[0,-1],[0,-1],[0,-4],[-1,-14],[0,-3],[0,-6],[0,-3],[-1,-7],[0,-4],[-1,-8],[-1,-21],[-2,-20],[-1,-7],[0,-16],[-2,-23],[-1,-11],[0,-6],[0,-1]],[[8254,3165],[1,111],[0,1],[0,2],[0,64],[0,45],[0,1],[0,1],[0,95],[0,14],[0,1],[0,65],[0,30],[0,1],[0,73],[0,39],[0,55],[0,2],[0,35],[0,20],[0,1],[-1,104],[0,1],[0,3]],[[8254,3929],[1,0],[6,1],[6,1],[12,3],[12,3],[6,1],[6,2],[11,3],[21,5],[13,4],[1,0],[20,7],[35,11],[32,12],[6,3],[24,10],[25,11],[14,7],[7,3],[11,5],[4,2],[7,4],[5,2],[2,1],[27,14],[1,0],[7,3],[9,5],[5,2],[15,8],[25,12]],[[3028,902],[1,88],[0,1],[0,1],[0,23],[-1,47],[0,2],[0,3],[1,33],[0,1],[0,1],[0,22],[0,3],[0,53],[1,20],[0,17],[0,2],[0,20],[1,96],[0,17],[0,14],[-1,79],[-1,20],[-1,112],[0,1],[0,39],[-1,74],[-1,32],[-1,80]],[[3025,1803],[1,0],[97,1],[97,1],[94,0],[96,1],[1,0],[95,0],[97,1],[96,0],[96,1],[2,0],[25,0],[68,1],[39,0],[56,0],[2,0],[2,0],[35,0],[9,1],[1,0],[1,0]],[[4550,6172],[4,-3],[1,0],[3,-3],[4,-3],[4,-3],[4,-3],[5,-4],[5,-4],[3,-2],[2,-3],[3,-2],[2,-3],[3,-2],[2,-3],[2,-2],[2,-3],[1,-1],[2,-2],[2,-2],[1,-3],[2,-2],[2,-3],[2,-3],[2,-3],[2,-2],[0,-1],[2,-3],[2,-4],[1,-1],[4,-6],[0,-1],[3,-5],[9,-16],[3,-4],[2,-4],[2,-4],[3,-4],[2,-4],[3,-4],[3,-4],[1,-1],[2,-4],[2,-3],[3,-3],[3,-4],[2,-2],[1,-1],[3,-4],[4,-3],[3,-3],[3,-3],[3,-3],[3,-3],[4,-3],[3,-3],[4,-4],[4,-3],[4,-3],[3,-3],[4,-4],[5,-3],[4,-3],[4,-4],[5,-3],[4,-4],[5,-4],[5,-4],[6,-4],[5,-4],[7,-5],[7,-5],[5,-4],[5,-4],[5,-3],[5,-4],[6,-4],[5,-3],[5,-4],[5,-4],[2,-1],[4,-2],[5,-4],[6,-3],[0,-1],[2,-1],[6,-4]],[[3048,5254],[0,4],[1,5],[-1,12],[-1,22],[1,3],[0,3],[1,2],[1,11],[1,4],[0,1],[0,60]],[[4147,6375],[1,-1],[1,-1],[2,-2],[5,-3],[4,-4],[5,-3],[4,-4],[5,-3],[5,-4],[6,-3],[6,-4],[5,-4],[7,-4],[5,-3],[7,-4],[6,-4],[6,-3],[1,-1],[40,-24],[1,0],[3,-2],[3,-2],[7,-4],[6,-3],[6,-3],[6,-3],[5,-3],[6,-3],[5,-3],[3,-2],[2,-1],[5,-3],[5,-2],[1,0],[4,-2],[4,-2],[3,-2],[4,-2],[4,-1],[4,-2],[4,-1],[3,-2],[4,-1],[4,-2],[4,-1],[4,-2],[4,-1],[4,-2],[5,-1],[7,-3],[9,-2],[9,-3],[4,-1],[12,-4],[4,-2],[11,-3],[6,-2],[5,-1],[4,-2],[5,-2],[5,-1],[4,-2],[5,-2],[3,-1],[1,0],[4,-2],[3,-1],[1,0],[4,-2],[4,-2],[3,-1],[4,-2],[3,-1],[3,-2],[2,-1],[3,-1],[5,-4],[6,-3],[3,-2],[1,-1],[4,-2],[4,-3],[1,-1],[2,-1],[1,-1],[4,-2]],[[6069,1527],[0,-1],[0,-6],[0,-8],[0,-20],[0,-18],[0,-1],[0,-14],[1,-11],[0,-7],[1,-79],[0,-1],[-3,-111],[0,-1],[0,-3],[0,-108],[0,-1],[-2,-137],[0,-5],[-1,-38]],[[6065,957],[-1,-47],[-4,-56],[0,-6],[-1,-22],[-1,-12]],[[4931,1280],[2,0],[3,1],[7,1],[3,1],[4,1],[1,0],[4,0],[1,0],[4,0],[1,0],[5,0],[5,1],[2,0],[8,1],[10,2],[1,1],[7,2],[8,1],[4,1],[6,0],[5,-1],[4,0],[2,0],[3,-1],[1,0],[1,0],[5,0],[2,0],[6,0],[7,0],[7,0],[4,0],[4,0],[2,0],[4,0],[2,0],[4,2],[1,0],[3,2],[1,1],[2,2],[2,2],[2,1],[3,3],[3,3],[2,4],[2,4],[1,2],[1,2],[1,5],[2,3],[3,4],[1,0],[4,3],[7,2],[7,2],[5,2],[2,0],[1,1],[6,1],[1,1],[1,0],[6,1],[2,1],[6,1],[10,3],[12,4],[2,0],[7,2],[8,2],[2,0],[10,2],[9,1],[9,0],[6,0],[2,1],[8,-1],[5,-1],[5,-2],[2,0],[5,-2],[8,-1],[4,0],[4,2],[5,2],[2,2],[1,1],[4,3],[4,2],[4,3],[5,2],[1,0],[5,2],[3,1],[3,0],[1,0],[0,1],[4,1],[5,2],[3,4],[2,4],[1,4],[3,3],[1,1],[3,2],[4,1],[7,1],[7,0],[6,1],[5,0],[7,0],[6,2],[1,0],[4,1],[3,1],[4,2],[4,3],[5,2],[8,2],[3,1],[9,1],[2,0],[3,1],[6,1],[9,0],[5,0],[4,0],[2,0],[3,0],[2,0],[7,-1],[3,-1],[1,0],[6,-3],[5,-3],[6,-5],[4,-2],[1,-1],[1,-1],[4,-2],[5,-1],[6,-1],[7,-1],[10,0],[8,1],[4,1],[3,0],[4,1],[4,0],[6,0],[1,0],[6,0],[3,1],[4,1],[8,3],[9,3],[7,3],[1,0],[4,0],[2,0],[5,1],[6,1],[9,2],[6,3],[5,2],[7,1],[3,0],[5,1],[8,1],[7,2],[5,5],[0,1],[0,2],[-1,3],[-2,3],[-1,2],[-1,2],[0,4],[1,3],[3,3],[4,3],[2,1],[4,1],[10,4],[8,2],[1,1],[1,0],[1,0],[9,4],[10,4],[8,3],[3,1],[1,0],[4,2],[6,2],[3,1],[5,3],[3,2],[2,2],[4,3],[1,1],[1,1],[1,1],[2,3],[1,3],[3,3],[3,3],[3,3],[4,2],[2,1],[6,3],[2,0],[5,3],[2,1],[1,0],[7,3],[2,0],[3,1],[3,1],[6,2],[2,1],[7,1],[1,0],[8,0],[9,-1],[7,0],[2,0],[8,0],[4,0],[5,0],[1,0],[9,1],[3,1],[8,1],[1,0],[6,1],[4,1],[11,2],[5,0],[4,1],[3,0],[3,0],[2,0],[9,1],[4,-1],[4,0],[2,-1],[5,0],[7,-3],[10,-2],[4,-2],[2,-1],[7,-2],[11,-1],[9,-1],[9,-2],[10,0],[9,0],[8,1],[1,0],[2,0],[2,0],[2,0],[3,1],[2,0],[5,1],[4,2],[5,1],[6,2],[5,0],[2,1]],[[7881,920],[-107,0],[-5,0],[-58,0],[-44,0],[-107,0],[-37,0],[-57,-1],[-95,0],[-96,-1],[-10,0],[-84,0],[-24,0],[-70,-1],[-89,0],[-6,0],[-93,-1],[-3,0],[-89,-2],[-3,0],[-1,0],[-36,2],[-44,17],[-1,0],[-53,21],[-6,2],[-65,0],[-528,1],[-5,0]],[[6069,1527],[0,30],[0,3],[0,1],[0,12],[0,7],[0,7]],[[1511,1699],[-1,-128],[0,-1],[0,-22],[0,-1],[1,-33],[1,-45],[0,-1],[0,-11],[2,-76],[0,-9],[0,-16],[0,-1],[0,-1],[3,-110],[0,-1],[0,-62],[0,-36],[0,-15],[0,-1],[0,-24],[0,-10],[0,-2],[1,-57],[0,-17],[0,-1],[0,-55],[1,-7],[0,-51]],[[1519,905],[-49,0],[-1,0],[-1,0],[-48,1],[-9,0],[-32,0],[-61,1],[-104,1],[-136,1],[-13,0],[-113,0],[-92,1],[-1,0],[-95,2],[-1,0]],[[763,912],[-94,0],[-55,1],[-24,0],[-19,0],[-1,0],[-3,0],[-44,0],[-43,0],[-46,1],[-48,0],[-1,0],[-1,0],[-4,0],[-72,0],[-16,1],[-94,0],[-83,1],[-11,0],[-43,0],[-14,0],[-38,0],[-1,0],[0,20],[-1,92],[0,1],[0,112],[-1,112],[-1,113],[-1,24],[0,28],[0,6],[0,12],[0,22],[0,19],[0,1],[-2,110],[0,1],[0,1],[0,77],[-1,26],[0,8],[0,1]],[[1,1702],[1,0],[6,0],[4,-1],[52,0],[33,0],[78,0],[8,0],[8,0],[1,0],[17,0],[2,0],[58,0],[112,0],[95,-1],[69,1],[25,0],[94,0],[1,0],[94,0],[84,0],[10,0],[4,0],[21,0],[69,0],[1,0],[94,0],[8,0],[18,1],[68,-2],[2,0],[35,-1],[1,0],[337,0]],[[3028,902],[-93,1],[-95,0],[-94,0],[-76,0],[-20,0],[-84,0],[-9,0],[-94,0],[-10,0],[-86,1],[-45,-1],[-49,0],[-94,1],[-1,0],[-94,0],[-95,0],[-93,0],[-1,0]],[[1895,904],[-92,0],[-93,0],[-1,0],[-95,0],[-95,1]],[[1511,1699],[81,1],[9,0],[-1,107]],[[1600,1807],[656,-1],[7,0],[13,0],[32,-1],[1,0],[1,0],[55,0],[1,0],[2,0],[93,0],[1,0],[92,0],[2,0],[49,0],[40,0],[5,0],[8,0],[18,-1],[5,0],[57,0],[5,0],[1,0],[1,0],[93,0],[33,0],[60,0],[2,0],[47,0],[45,-1]],[[6066,2709],[0,-1],[0,-21],[1,-86],[0,-5],[0,-110],[0,-2],[0,-39],[0,-70],[0,-3],[0,-4],[0,-105],[0,-1]],[[6067,2262],[-92,0],[-95,1],[-94,-1],[-2,0],[-92,0],[-2,0],[-26,0],[-67,0],[-2,0],[-92,0],[-94,0],[-94,0],[-93,0],[-94,0],[-93,0],[-94,0]],[[4941,2262],[0,1],[0,17],[1,69],[0,24],[0,2],[0,1],[0,111],[1,112],[0,1],[-1,89],[0,22],[-1,1]],[[4941,2712],[1,0],[1,0],[2,0],[28,-1],[45,0],[6,0],[11,0],[94,0],[95,0],[93,0],[93,-1],[1,0],[90,0],[1,0],[1,0],[1,0],[1,0],[3,0],[90,-1],[70,1],[23,0],[26,0],[12,0],[56,0],[69,0],[23,-1],[2,0],[93,0],[60,0],[33,0],[1,0]],[[7818,2261],[1,0],[-1,0]],[[6066,2709],[0,1],[0,4],[0,37],[0,25],[0,46],[0,21],[-1,12],[0,45],[0,2],[-1,28],[0,4],[0,1]],[[6064,2935],[1,0],[15,0],[81,-1],[92,0],[93,0],[96,0],[126,0],[125,0],[1,0],[62,0],[2,0],[60,0],[95,0],[1,0],[40,0],[53,0],[34,0],[60,0],[1,0],[49,0],[37,0],[7,0],[2,0],[66,0],[6,0]],[[8254,3929],[-5,-2],[-10,-2],[-11,-2],[-11,-2],[-11,-2],[-5,-1],[-24,-3],[-3,-1],[-15,-2],[-15,-2],[-15,-1],[-18,-2],[-13,-1],[-14,-1],[-6,-1],[-7,0],[-4,-1],[-3,0],[-12,0],[-18,-1],[-16,-1],[-13,0],[-4,0],[-16,-1],[-16,0],[-16,1],[-16,0],[-25,1],[-4,0],[-17,0],[-82,3],[-30,1],[-15,1],[-63,2],[-10,0],[-12,1],[-2,0],[-1,0],[-1,0],[-21,1],[-50,2],[-12,0],[-18,1],[-13,0],[-11,0],[-75,3],[-23,1],[-95,3],[-14,1],[-68,2],[-20,1],[-15,0],[-14,1],[-18,0],[-28,1],[-58,1],[-69,2],[-16,0],[-5,0],[-5,0],[-5,0],[-6,-1],[-6,0],[-5,-1],[-1,0],[-1,0],[-21,4],[-20,3],[-5,0],[-15,2],[-20,4],[-12,-1],[-47,7],[-11,4],[-9,1],[-20,4],[-4,1],[-15,3],[-11,2],[-8,2],[-11,2],[-8,2],[-20,4],[-18,4],[-20,6],[-9,2],[-8,2],[-5,2],[-15,4],[-18,5],[-9,4],[-9,3],[-18,5],[-17,6],[-18,7],[-19,7],[-15,6],[-17,8],[-2,0],[-5,3],[-10,3],[-17,7],[-13,6],[-2,3],[-17,6],[-10,5],[-7,3],[-13,8],[-16,9],[-7,3],[-8,5],[-15,8],[-11,7],[-3,2],[-14,9],[-15,9],[-9,6],[-4,3],[-13,9],[-7,4],[-7,5],[-4,2],[-9,7],[-30,18]],[[6263,4193],[-1,1],[-16,15],[-22,19],[-5,4],[-3,4],[-3,2],[-5,4],[-8,6],[-3,2],[-16,13],[-1,0],[-1,2],[-3,2],[-18,14],[-1,2],[-14,11],[-2,1],[-4,4],[-12,9],[-12,10],[-4,3]],[[7085,3159],[-23,29],[-2,2],[-41,50],[-6,7],[-9,11],[-1,1],[-38,46],[-13,15],[-36,45],[-4,6],[-1,1],[-5,10],[-17,20],[-1,1],[-19,23],[-13,15],[-12,15],[-3,3],[-8,11],[-10,14],[-7,10],[-16,26],[-4,6],[-17,27],[-15,21],[-17,22]],[[6747,3596],[-1,0],[0,1],[-4,5],[-28,33],[-27,29],[-20,20],[-4,4],[-2,1],[-2,3],[-12,12],[-23,23],[-14,14],[-13,13],[-29,28],[-28,32],[-5,6],[-12,16],[-1,1],[0,1],[-27,34],[-7,10],[-6,8],[-4,6],[-5,6],[-34,53],[-9,14],[-2,3],[-3,5],[-2,3],[-1,2],[-7,10],[-1,2],[-16,25],[-5,8],[-2,5],[-7,12],[-1,0],[-5,10],[-10,16],[-3,3],[-2,4],[-7,11],[-2,3],[-1,1],[-1,1],[-2,3],[-4,6],[-1,1],[-13,16],[-15,17],[-2,3],[-3,3],[-7,8],[-6,7],[-3,3],[-2,2],[-1,2],[-23,22],[-3,3],[-1,1],[-2,2],[-1,1]],[[3049,4488],[0,-81],[0,-29],[0,-1],[0,-1],[0,-29],[-1,-81],[-1,-112],[0,-1],[-1,-110],[0,-1],[0,-32],[0,-79],[0,-1],[0,-3],[-1,-93],[0,-15],[-2,-118],[0,-3],[0,-19],[0,-83]],[[3043,3596],[-1,0],[-94,0],[-8,0],[-62,0],[-25,0],[-3,0],[-20,0],[-70,-1],[-44,1],[-27,0],[-23,0],[-1,0],[-18,0],[-76,-1],[-1,0],[-94,1],[-1,0],[-94,0],[-30,0],[-64,0]],[[2287,3596],[0,1],[0,55],[1,38],[0,1],[0,4],[0,1],[0,9],[0,9],[0,3],[0,10],[1,92],[0,1],[0,14],[1,4],[0,1],[1,1],[0,1],[4,7],[43,83],[30,57],[23,45],[5,7],[2,3],[1,2],[4,5],[35,38],[1,1],[30,34],[8,8],[21,23],[1,1],[13,14],[36,40],[0,1],[11,12],[2,3],[10,10],[5,6],[4,4],[18,20],[1,1],[55,61],[8,9],[10,11],[5,6],[20,22],[2,2]],[[2699,4377],[0,1],[1,0],[3,3],[21,25],[30,33],[13,14],[14,16],[11,12],[6,7],[1,0],[0,1],[5,4],[1,1],[34,31],[4,3],[3,3],[5,5],[11,10],[1,0],[0,1],[16,22],[7,10],[12,16],[1,2],[58,61],[9,9],[27,27],[9,12],[5,12],[1,1],[7,9],[3,3],[8,10],[8,10],[6,8],[5,7]],[[2287,3596],[0,-1],[-2,-110],[-2,-116],[0,-1],[-1,-111],[0,-1],[-1,-98],[0,-1],[0,-11],[0,-2],[-1,-98],[0,-1],[-1,-112],[0,-1]],[[2279,2932],[-15,0],[-11,0],[-29,1],[-38,0],[-95,0],[-19,0],[-76,0],[-52,0],[-82,0],[-8,-1],[-28,-1],[-97,0],[-197,-1],[-131,0],[-19,0]],[[1382,2930],[1,323],[1,344]],[[1384,3597],[24,0],[125,0],[122,0],[59,0],[35,0],[3,0],[39,1]],[[1791,3598],[8,0],[7,-1],[6,0],[1,0],[24,-1],[70,0],[67,0],[29,0],[95,0],[94,0],[95,0]],[[3043,3596],[-1,-1],[-1,-107],[0,-1],[0,-1],[-2,-115],[0,-1],[-1,-112],[0,-1],[0,-1],[-1,-96],[0,-2],[0,-1],[-1,-111],[0,-2],[-2,-109],[0,-1],[0,-1]],[[3034,2933],[-95,0],[-93,0],[-1,0],[-95,-1],[-19,0],[-25,0],[-49,0],[-6,0],[-7,-1],[-17,0],[-65,-1],[-94,1],[-95,0],[-4,1],[-90,0]],[[6747,3596],[-5,0],[-5,0],[-1,0],[-1,0],[-1,0],[-27,0],[-9,0],[-6,0],[-1,0],[-4,0],[-101,0],[-149,0],[-83,0],[-12,0],[-12,0],[-81,0],[-93,0],[-48,0],[-48,0]],[[6060,3596],[-93,0],[-94,0],[-12,0],[-83,0],[-2,0],[-47,0],[-46,0]],[[5683,3596],[1,57],[1,48],[0,1],[-1,117],[0,1],[3,111],[0,1],[0,110],[4,112],[0,1],[2,111]],[[1542,8309],[1,-52],[1,-61],[0,-1],[2,-111],[0,-1],[1,-111],[0,-1],[0,-98],[0,-14],[0,-1],[1,-111],[0,-8],[1,-105]],[[792,7639],[0,1],[0,4],[0,9],[0,6],[0,7],[0,15],[0,67],[0,5],[0,106],[0,113],[0,7],[0,105],[-4,112],[0,1],[0,1],[-3,109],[0,2],[0,1]],[[7881,920],[-1,-24],[0,-8],[0,-9],[-1,-15],[0,-19],[0,-36],[0,-1],[-1,-62],[0,-25],[-1,-25],[0,-1],[-2,-226],[0,-1],[0,-36],[0,-3],[0,-1],[0,-7],[0,-16],[0,-1],[0,-3]],[[7875,401],[-1,0],[-9,0],[-311,1],[0,-7],[-329,-2],[0,-88],[-5,0],[-37,0],[0,-2],[0,-23],[-1,0],[-5,0],[-2,0],[-2,0],[-20,0],[-176,-1],[0,69],[191,1],[-1,47],[-4,4],[-366,-2],[0,5],[-49,1],[-89,1],[-3,0],[-10,0],[-54,0],[-1,0],[-29,1],[-38,0],[-16,0],[0,16],[-39,-1],[0,-6],[-38,-1],[0,-7],[-8,0],[0,-3],[-10,0],[1,35],[-36,-1],[-1,-17],[-4,0],[-36,0],[-1,-22],[-7,0],[-49,-1],[1,5],[0,9],[-37,-1],[0,-8],[-8,0],[0,-15],[-2,-42],[-104,0],[-53,0],[-2,0],[-1,0]],[[6066,7853],[0,-89],[0,-23],[2,-112]],[[6068,7629],[0,-1],[-1,-35],[0,-2],[0,-1],[-1,-23],[0,-81],[-1,-61],[0,-61],[0,-1],[-1,-61],[0,-1]],[[6064,7301],[-2,0],[-58,0],[-15,0],[-53,0],[-2,0],[-1,0],[-46,0],[-86,1],[-1,0],[-113,0],[0,-25],[-1,0],[-99,-1],[-1,0],[-89,-1],[-32,0],[-113,0],[-2,-49],[-4,-6],[-3,-5],[-1,-2],[-1,-1],[-2,-4],[-1,0],[0,-1],[-22,-22],[-8,-7],[1,-27],[0,-14],[0,-1]],[[5309,7136],[-92,0],[-9,0],[-58,0],[-41,0],[-1,0],[-83,-1],[-6,1],[-8,2],[-112,0],[-1,0]],[[4896,7629],[-2,113],[0,1],[0,54],[0,1],[-1,56]],[[4893,7854],[2,0],[1,0],[176,1],[2,0],[1,0],[29,0],[84,0],[4,0],[87,-1],[2,0],[87,0],[4,0],[85,0],[1,0],[3,0],[1,0],[85,0],[4,0],[48,0],[38,0],[3,0],[46,0],[1,0],[114,0],[133,0],[132,-1]],[[7585,7987],[0,-44],[0,-57],[0,-25],[0,-2],[0,-1],[1,-47],[0,-2],[0,-3],[0,-61],[0,-4],[0,-17],[0,-90],[0,-2]],[[7586,7632],[-58,0],[-36,0],[-10,0],[-86,-1],[-92,1],[-4,0],[-96,-1],[-91,1],[-5,-1],[-50,0],[-13,0],[-32,0],[-97,0],[-94,-1],[-61,1],[-33,0],[-1,0],[-70,-1],[-24,0],[-93,0],[-96,0],[-114,-1],[-132,0],[-43,0],[-87,0]],[[6066,7853],[0,1],[0,11],[0,100],[0,2],[0,104],[0,7],[0,5],[0,107],[0,2],[0,111],[0,2],[0,20],[0,82],[0,1]],[[6066,8408],[1,0],[1,0],[1,0],[1,0],[47,0],[44,1],[45,0],[1,0],[1,0],[18,-1],[19,-4],[2,0],[10,-3],[24,-13],[2,-2],[11,-8],[3,-2],[1,0],[16,-16],[20,-26],[8,-9],[1,-1],[13,-8],[11,-6],[9,-4],[4,0],[17,-5],[16,-2],[5,-1],[5,0],[22,0],[95,1],[94,0],[94,0],[50,0],[39,1],[8,0],[1,0],[24,-2],[21,-5],[7,-2],[19,-5],[23,-5],[50,-18],[34,-14],[4,-2],[5,-2],[47,-22],[45,-26],[3,-2],[3,-3],[29,-23],[6,-6],[12,-11],[4,-3],[10,-11],[2,-3],[21,-22],[10,-12],[3,-3],[15,-15],[14,-13],[20,-13],[32,-17],[11,-6],[6,-2],[35,-14],[23,-6],[17,-5],[1,0],[10,-2],[2,-1],[3,-1],[30,-5],[4,0],[4,-1],[4,-1],[1,0],[4,0],[4,-1],[6,0],[7,-1],[5,0],[4,-1],[5,0],[4,0],[5,-1],[4,0],[1,0],[85,-4],[10,-1],[1,0]],[[4941,2262],[0,-2],[-2,-109],[0,-1],[0,-10],[-1,-35],[0,-18],[0,-11],[0,-8],[-1,-30],[-1,-87],[0,-7],[0,-6],[0,-5],[0,-6],[0,-1],[0,-10],[-1,-103],[0,-1]],[[4035,1810],[0,1],[0,17],[1,104],[0,64],[0,39],[0,9],[1,109],[1,101],[0,5],[0,1]],[[4038,2260],[12,0],[5,0],[16,0],[13,0],[1,0],[1,0],[1,0],[25,0],[38,0],[33,-5],[25,-2],[134,-1],[23,3],[6,1],[4,0],[25,4],[22,1],[39,1],[9,0],[26,0],[21,0],[49,1],[93,0],[96,0],[39,0],[54,-1],[90,0],[2,0],[1,0]],[[5309,7136],[0,-1],[0,-7],[0,-126],[0,-1],[0,-2],[0,-1],[0,-132],[0,-1],[1,-119],[0,-14],[0,-2],[0,-1]],[[5310,6729],[-26,0],[-52,1],[-22,0],[-20,0],[-79,-1],[-1,0],[-82,0],[-17,0],[-1,0],[-21,0],[-99,0],[-3,0],[-37,0],[-4,0],[-61,0],[-64,0],[-2,0],[-8,0],[-23,0],[-1,0],[-79,0],[-22,0],[-128,0],[-3,0],[-119,0],[-12,0],[-1,0],[-126,6],[-2,1],[-90,7],[-1,0],[-2,0],[-1,0],[-3,0],[-72,4],[-3,0],[-6,1],[-4,0],[-9,0],[-1,0]],[[6064,7301],[0,-61],[0,-61]],[[6064,7179],[0,-1],[0,-11],[1,-33],[1,-51],[1,-26],[1,-27],[0,-1],[0,-2],[0,-2],[1,-71],[0,-2],[0,-1],[0,-1],[0,-34],[0,-74],[0,-4],[2,-36],[0,-4],[-1,-54],[0,-14],[0,-1],[0,-1]],[[6070,6728],[0,-8]],[[6070,6720],[-7,8],[-176,1],[-8,0],[-103,0],[-70,0],[-20,0],[-94,0],[-31,0],[-63,1],[-55,-1],[-38,0],[-94,0],[-1,0]],[[7586,7632],[1,0],[1,0],[7,0],[1,0],[1,0],[6,0],[1,0],[6,0],[28,0],[51,1],[5,0],[2,0],[1,0],[5,0],[6,0],[25,0],[50,0],[4,0],[85,1],[1,0],[21,0],[77,0],[92,1],[1,0],[56,0],[8,0]],[[8128,7635],[-1,-1],[-2,-2],[-20,-27],[-27,-31],[-27,-28],[-17,-16],[-7,-7],[-72,-64],[-45,-38],[-65,-59],[-26,-22],[-60,-53],[-130,-107],[-8,0],[-14,0],[-12,0],[-3,0],[-9,0],[-4,0],[-70,0],[-21,0],[-4,0],[-92,0],[-73,0],[-22,0],[-96,0],[-86,1],[-8,0],[-97,0],[-60,0],[-32,1],[-97,0],[-96,-1],[-1,0],[-4,0],[-45,0],[-44,0],[-46,0],[-49,-1],[-95,0],[-30,0],[-24,0],[-40,0],[-20,0],[-75,-1],[-34,0],[-23,0],[-2,0],[-36,0],[-41,0],[-51,0],[-1,0]],[[1382,2930],[-2,-200],[1,-7],[1,-17],[0,-5],[3,-5],[5,-9],[7,-11],[1,-5],[0,-1],[1,-9],[-5,-16],[1,-10],[5,-9],[4,-4],[5,-6],[11,-7],[9,-7],[3,-2],[20,-14],[9,-9],[3,-9],[0,-4],[-1,-4],[0,-3],[4,-5],[4,-4],[2,-2],[3,-2],[2,-1],[5,-1],[11,-3],[7,-1],[3,-1],[10,-2],[2,0],[2,-1],[14,-3],[3,-1],[8,-2],[8,-5],[4,-4],[4,-8],[1,0],[-1,-15],[0,-3],[2,-8],[0,-2],[8,-12],[1,0],[1,-2],[15,-21],[4,-7],[2,-5],[2,-3],[4,-4],[2,-2],[0,-35],[1,-14],[0,-32],[0,-20],[-1,-233],[0,-286]],[[1,1702],[-1,89],[0,15],[0,7],[0,20],[0,93],[1,29],[0,3],[0,32],[0,1],[0,68],[0,84],[0,3],[0,1],[0,4],[0,3],[1,106],[0,3],[0,47],[0,52],[0,13],[1,13],[0,86],[0,13],[0,1],[2,97],[0,16],[0,36],[1,54],[0,3],[0,12],[0,1],[0,2],[0,23],[1,92],[0,1],[0,21],[0,93]],[[7,2939],[476,-4],[6,0],[86,0],[103,-1],[5,0],[41,0],[20,0],[4,0],[18,0],[61,0],[555,-4]],[[3034,2933],[-2,-112],[-1,-2],[1,-103],[0,-1],[0,-8],[-1,-113],[-1,-113],[0,-1],[-1,-112],[0,-1],[0,-109],[0,-3],[0,-1],[-1,-111],[0,-1],[0,-2],[-1,-18],[-1,-93],[0,-26],[1,-52],[0,-34],[-1,-29],[-1,-83],[0,-1],[0,-1]],[[4038,2935],[0,-5],[1,-123],[1,-88],[0,-7],[0,-1]],[[4040,2711],[0,-1],[0,-1],[0,-4],[-1,-113],[0,-112],[-1,-132],[0,-21],[0,-65],[0,-2]],[[3034,2933],[96,0],[1,0],[32,-1],[14,0],[49,0],[1,0],[95,1],[57,0],[37,0],[47,1],[12,0],[64,0],[1,0],[16,0],[105,0],[95,0],[17,0],[24,0],[96,0],[35,1],[28,0],[35,0],[36,1],[9,-1],[2,0]],[[9015,921],[0,-27],[0,-5],[-1,-30],[0,-50],[-2,-111],[0,-3],[-1,-112],[-1,-63],[0,-12],[0,-4],[0,-1],[0,-2],[0,-11],[0,-3],[0,-3],[0,-1],[-1,-13],[0,-1],[-1,-106],[0,-3],[0,-1],[0,-2],[0,-4],[0,-1],[-1,0],[-2,0],[-82,-1],[-9,0],[-92,0],[-2,0],[-47,0],[0,-6],[0,-9],[-2,-159],[-26,0],[-22,0],[-139,0],[-5,0],[-191,-1],[-79,24],[2,46],[1,63],[1,26],[-62,0],[-94,0],[-1,-26],[0,-37],[-85,0],[-9,3],[-155,64],[0,27],[1,20],[0,2],[18,0],[13,0],[34,0],[10,0],[3,0],[14,0],[9,4],[15,7],[40,0],[49,0],[27,-11],[17,0],[1,63],[-9,-3],[-85,-33],[-9,-3],[0,-7],[-32,0],[-118,0],[-16,0],[-4,-1],[-1,-1],[0,-1],[0,-1],[-9,0]],[[6769,6392],[-12,13],[-12,18],[-6,13],[-5,10],[-7,24],[-6,25],[-1,9],[-3,21],[-1,29],[2,30],[3,20],[0,7],[5,23],[6,21],[13,37],[2,5],[13,26],[3,6],[1,0]],[[6764,6729],[0,1],[9,17],[30,47],[13,18],[29,33],[12,11],[1,1],[1,0],[37,32],[24,17],[3,2],[18,10],[9,5],[43,17],[32,10],[43,8],[15,1],[33,4],[8,0],[17,1],[25,1],[7,0],[7,0],[64,-4],[49,-6],[21,-3],[14,-3],[3,-1],[8,-1],[6,-2],[7,-1],[6,-2],[10,-2],[1,-1],[53,-12],[91,-21],[56,-12],[9,-2],[2,-1],[36,-8],[10,-1],[28,-5],[5,-1],[18,-3],[15,-2],[13,-1],[4,-1],[22,-2],[14,-1],[27,-3],[31,-2],[19,0],[6,0],[13,-1],[44,0],[43,2],[7,0],[28,2],[39,3],[13,1],[39,5],[27,4],[31,5],[30,6],[5,2],[34,7],[4,1],[21,6],[16,5],[13,3],[20,6],[4,1],[18,7],[32,11],[125,45],[55,20],[85,30],[96,34],[2,1],[17,6],[11,4],[126,46],[17,6],[90,33],[61,22],[13,5],[4,2],[1,0]],[[9012,7191],[0,-2],[0,-27],[0,-5],[0,-2],[0,-3],[1,-44],[0,-61],[1,-142],[0,-55],[0,-3],[0,-1],[1,-47],[0,-27],[0,-17],[0,-11],[1,-125],[0,-120],[1,-92],[0,-102],[1,-11]],[[5683,3596],[-8,0],[-75,0],[-12,0],[-38,0],[-56,0],[-94,-1],[-94,0],[-7,1],[-85,0],[-1,0],[-1,0],[-57,0],[-38,0],[-93,0],[-95,-1],[-1,0]],[[7,2939],[0,52],[0,15],[1,103],[0,3],[0,6],[0,8],[0,28],[0,9],[0,1],[0,2],[1,50],[4,133],[1,36],[0,1],[0,2],[1,42],[0,6],[1,52],[1,20],[1,55],[0,1],[1,30],[0,3],[0,4]],[[19,3601],[1,0],[1,0],[4,0],[45,1],[49,1],[40,-2],[19,0],[32,-1],[2,0],[93,0],[104,-1],[2,0],[20,0],[2,0],[59,0],[50,0],[3,-1],[8,0],[77,0],[2,0],[171,-4],[10,0],[124,0],[87,1],[360,2]],[[3004,5381],[-22,-10],[-131,-53],[-33,-13],[-29,-13],[-88,-42],[-33,-17],[-28,-13],[-98,-40],[-17,-7],[-17,-8],[-28,-15],[-62,-35],[-118,-65],[-50,-28],[-34,-17],[-38,-17],[-30,-11],[-30,-10],[-52,-14],[-25,-6],[-19,-3],[-19,-1],[-21,-1],[-7,-1],[-10,-1],[-11,-2],[-24,-6],[-77,-15],[-31,-7]],[[1822,4910],[-50,-9],[-59,-13],[-220,-46],[-12,-3],[-456,-92],[-16,-4],[-14,-3],[-4,0],[-3,-1],[-3,-1],[-1,0],[-19,-4],[-6,-1],[-25,-4],[-28,-5],[-23,-3],[-4,0],[-1,-1],[-16,-2],[-8,-1],[-14,-1],[-6,-1],[-23,-2],[-22,-2],[-31,-3],[-6,0],[-1,0],[-13,-1],[-15,0],[-33,-2],[-4,0],[-51,-2],[-24,-1],[1,-30],[-6,-295],[-2,-103]],[[604,4274],[-432,5],[-18,0],[-15,0],[-8,1],[-107,-1],[-1,0],[-1,0]],[[22,4279],[0,2],[0,23],[0,21],[1,11],[0,81],[0,1],[0,7],[0,2],[0,1],[0,15],[0,5],[2,177],[0,9],[0,1],[0,2],[1,44],[0,1],[0,19],[0,21],[1,93],[0,11],[0,3],[0,25],[0,78],[0,16],[0,4],[0,10],[1,88],[1,174],[0,94],[0,69],[85,0],[2,0],[1,0],[104,0],[1,0],[43,0],[59,0],[76,0],[284,1],[50,0],[50,0],[1,0],[0,1],[0,20],[1,91],[0,47],[1,49],[0,14]],[[9011,7191],[1,0],[-1,0],[-4,-2],[-13,-5],[-61,-22],[-90,-33],[-17,-6],[-126,-46],[-11,-4],[-17,-6],[-2,-1],[-96,-34],[-85,-30],[-55,-20],[-125,-45],[-32,-11],[-18,-7],[-4,-1],[-20,-6],[-13,-3],[-16,-5],[-21,-6],[-4,-1],[-34,-7],[-5,-2],[-30,-6],[-31,-5],[-27,-4],[-39,-5],[-13,-1],[-39,-3],[-28,-2],[-7,0],[-43,-2],[-44,0],[-13,1],[-6,0],[-19,0],[-31,2],[-27,3],[-14,1],[-22,2],[-4,1],[-13,1],[-15,2],[-18,3],[-5,1],[-28,5],[-10,1],[-36,8],[-2,1],[-9,2],[-56,12],[-91,21],[-53,12],[-1,1],[-10,2],[-6,2],[-7,1],[-6,2],[-8,1],[-3,1],[-14,3],[-21,3],[-49,6],[-64,4],[-7,0],[-7,0],[-25,-1],[-17,-1],[-8,0],[-33,-4],[-15,-1],[-43,-8],[-32,-10],[-43,-17],[-9,-5],[-18,-10],[-3,-2],[-24,-17],[-37,-32],[-1,0],[-1,-1],[-12,-11],[-29,-33],[-13,-18],[-30,-47],[-9,-17],[0,-1]],[[6764,6729],[-19,0],[-2,0],[-17,-1],[-44,1],[-48,0],[-3,0],[-92,0],[-2,0],[-90,0],[-2,0],[-3,0],[-93,0],[-98,0],[-18,0],[-73,-1],[-88,0],[-2,0]],[[8128,7635],[9,0],[78,1],[7,0],[4,0],[24,0],[1,0],[1,0],[0,-48],[1,-94],[1,-83],[1,-9],[1,-83],[0,-27],[0,-18],[1,-86],[0,-4],[10,0],[112,1],[117,1],[67,1],[2,0],[17,0],[82,1],[259,2],[4,0],[68,1],[1,0],[1,0],[2,0],[11,0],[1,0]],[[5310,6729],[0,-23],[0,-25],[0,-1],[0,-31],[0,-21],[0,-11],[1,-88],[0,-25],[0,-3],[0,-13],[7,-8],[0,-1],[5,-5],[65,-82],[1,0],[63,-79],[1,-1],[49,-60],[1,-1],[1,-1]],[[5504,6250],[-1,0],[-1,0],[-5,-2],[-1,0],[-10,-3],[-47,-14],[-38,-11],[-13,-3],[-41,-13],[-54,-15],[-1,-1],[-9,-2],[-96,-28],[-2,-1],[-10,-3],[-16,-4],[-2,-1],[-66,-18],[-8,-2],[-4,-1],[-9,-2],[-7,-2],[-10,-2],[-1,0],[-8,-2],[-4,0],[-22,-5],[-1,2],[-4,6],[-2,3],[-2,3],[-1,2],[-2,2],[-2,3],[-8,9],[-2,2],[-3,3],[-2,2],[-3,2],[-3,3],[-3,2],[-3,2],[-4,3],[-1,0],[-4,3],[-6,3],[-5,3],[-5,3],[-5,3],[-6,3],[-7,4],[-6,3],[-7,2],[-6,3],[-7,3],[-8,4],[-7,3],[-8,3],[-8,3],[-8,2],[-7,3],[-7,2],[-6,2],[-6,2],[-24,7],[-6,2],[-6,2],[-6,1],[-5,1],[-5,1],[-5,1],[-4,1],[-5,0],[-4,0],[-5,1],[-4,0],[-5,0],[-1,0],[-4,-1],[-6,0],[-5,0],[-5,-1],[-5,-1],[-5,0],[-6,-2],[-11,-2],[-6,-1],[-7,-2],[-3,-1],[-4,-1],[-7,-2],[-8,-2],[-8,-2],[-8,-3],[-9,-3],[-7,-2],[-8,-3],[-7,-2],[-8,-3],[-7,-3],[-7,-3],[-8,-3],[-1,0],[-6,-3],[-7,-3],[-7,-3],[-7,-4],[-7,-3],[-3,-2],[-3,-1],[-1,-1],[-2,-1],[-2,-1],[-3,-1]],[[6070,6720],[1,-79],[-6,-24],[0,-3],[-3,-9],[-6,-23],[0,-1]],[[6056,6581],[-11,-22],[-1,-1],[-3,-3],[-44,-50],[-1,0],[-20,-23],[-11,-12],[-21,-22],[-29,-33],[-58,-60],[-3,-3]],[[5854,6352],[-2,0],[-4,-2],[-17,-5],[-14,-4],[-17,-5],[-23,-6],[-16,-5],[-6,-2],[-9,-3],[-30,-8],[-11,-3],[-13,-4],[-45,-13],[-32,-9],[-6,-2],[-1,-1],[-14,-4],[-18,-5],[-18,-5],[-20,-6],[-34,-10]],[[4941,2712],[-2,0],[-2,0],[-88,-1],[-94,0],[-94,1],[-88,0],[-5,0],[-1,0],[-1,0],[-2,0],[-39,0],[-7,0],[-47,-1],[-46,1],[-49,0],[-51,-1],[-46,0],[-95,-1],[-36,1],[-61,0],[-47,0]],[[4038,2935],[0,1],[0,8],[-1,19],[0,79],[0,6],[0,1],[-1,22],[0,89],[0,20],[0,44],[-1,46],[0,2],[0,17],[0,18],[-1,93],[-1,58],[0,31],[0,1],[0,20],[-1,72],[0,13]],[[4928,3595],[1,-108],[0,-2],[2,-115],[0,-1],[2,-68],[1,-27],[0,-1],[2,-112],[0,-1],[0,-12],[0,-6],[0,-94],[0,-1],[2,-61],[0,-5],[2,-45],[0,-7],[0,-6],[1,-99],[0,-1],[0,-2],[0,-41],[0,-25],[0,-43]],[[6060,3596],[0,-2],[0,-31],[0,-75],[0,-3],[0,-1],[0,-112],[0,-1],[2,-111],[0,-2],[0,-5],[1,-94],[0,-1],[0,-21],[0,-4],[1,-85],[0,-1],[0,-112]],[[2483,3],[-1,0],[-3,0],[-2,0],[-20,1],[-74,0],[-112,1],[-122,0],[-112,1],[-7,0],[-19,0],[-32,0],[-85,1],[-92,1]],[[1802,8],[1,14],[0,1],[6,12],[11,12],[11,10],[3,3],[5,4],[4,3],[0,1],[8,8],[2,2],[2,2],[0,1],[7,6],[7,8],[13,20],[3,8],[4,12],[2,13],[0,57],[0,26],[2,0],[0,56],[1,0],[-1,56],[11,0],[-1,81],[0,21],[-4,9],[0,1],[-1,0],[-3,7],[0,81],[0,1],[0,24],[0,1],[1,111],[0,1],[-1,90],[0,20],[0,1],[0,2],[0,110]],[[1802,8],[-1,0],[-4,0],[-109,0],[-38,1],[-39,0],[-94,0],[-45,1],[-48,0],[-96,0],[-93,1],[-93,1],[-95,0],[-90,1],[-4,0],[-34,0],[-60,0],[-93,1],[-1,0],[-2,0],[0,1],[0,103],[0,6],[0,1],[0,23],[0,89],[0,112],[0,1],[0,18],[0,6],[0,2],[0,8],[0,27],[0,50],[0,1],[0,25],[0,40],[0,48],[0,17],[0,11],[0,10],[0,74],[0,60],[0,54],[0,38],[0,73]],[[6463,6280],[-19,0],[-16,0],[-4,0],[-71,0],[-1,0],[-5,0],[-11,0],[-183,0],[-1,0],[-1,-1],[-5,-1],[-27,-8],[-24,-6],[-1,0],[-6,3],[-14,7],[-3,5],[-4,7],[0,1],[0,5],[0,72],[1,33],[0,10],[0,1],[-1,11],[0,1],[-1,50],[0,34],[0,1],[1,27],[0,17],[3,6],[0,1],[-1,2],[-1,2],[-7,13],[-1,1],[-4,7]],[[604,4274],[253,-3],[180,-2],[9,0],[-1,-6],[-1,-9],[-1,-8],[-1,-6],[-1,-5],[-1,-6],[-2,-10],[-2,-9],[0,-4],[-1,-4],[-2,-10],[0,-4],[-3,-14],[-5,-13],[-2,-5],[-3,-7],[-7,-13],[-6,-10],[-1,-2],[-7,-10],[-8,-9],[-8,-10],[-14,-14],[-7,-6],[-4,-3],[-5,-4],[-5,-4],[-3,-2],[-1,-1],[-4,-3],[-3,-2],[-10,-8],[-1,0],[-1,-1],[-2,-2],[-4,-2],[2,-1],[5,-2],[1,-1],[16,-6],[8,-2],[6,-2],[28,-7],[23,-4],[16,-4],[28,-6],[18,-3],[28,-5],[36,-3],[24,-2],[14,-1],[27,-2],[9,-1],[25,-3],[10,-1],[3,0],[5,0],[5,0],[6,0],[3,0],[2,1],[2,0],[3,0],[1,0],[9,1],[363,-1],[62,0],[85,-1]],[[1792,3987],[-1,-41],[-2,-150],[0,-24],[0,-2],[-3,-20],[2,-7],[0,-6],[0,-1],[0,-3],[0,-3],[0,-2],[0,-2],[-1,-12],[0,-4],[1,-5],[1,-21],[2,-31],[0,-1],[-1,-18],[-1,-17],[2,-14],[0,-1],[0,-4]],[[19,3601],[0,5],[1,73],[0,75],[0,26],[1,46],[0,100],[0,9],[0,20],[0,22],[0,26],[0,27],[0,21],[0,45],[0,62],[1,38],[0,24],[0,59]],[[1913,4378],[2,-4],[2,-3],[2,-4],[2,-4],[1,-4],[1,-3],[1,-3],[0,-3],[1,-3],[0,-2],[0,-4],[-1,-4],[0,-3],[-1,-2],[-1,-3],[-1,-3],[-1,-3],[-1,-3],[-2,-2],[-1,-3],[-2,-3],[-1,-3],[-62,-119],[-11,-19],[-2,-4],[-2,-3],[-1,-4],[-2,-2],[-2,-5],[-2,-3],[-2,-4],[-2,-4],[-2,-3],[-1,-4],[-2,-3],[-1,-4],[-2,-4],[-1,-3],[-2,-4],[-1,-4],[-2,-3],[-1,-4],[-1,-3],[-2,-4],[-1,-4],[-1,-3],[-1,-5],[-1,-3],[-1,-4],[-1,-3],[-1,-4],[-1,-4],[-1,-3],[-1,-4],[0,-4],[-1,-3],[0,-4],[-1,-4],[-1,-4],[0,-3],[-1,-4],[0,-4],[0,-4],[0,-3],[-1,-4],[0,-4],[0,-4],[0,-3],[0,-4],[0,-2],[0,-2],[0,-3],[0,-4],[0,-4],[0,-4]],[[1822,4910],[0,-20],[0,-66],[1,-7],[-1,-14],[-2,-83],[1,0],[50,0],[10,0],[37,0],[0,-52],[0,-9],[0,-1],[1,-61],[0,-35],[0,-40],[-8,-2],[-5,-1],[-4,-2],[-5,-1],[-4,-2],[-6,-3],[-4,-3],[-3,-2],[-2,-2],[-3,-4],[-2,-3],[-2,-3],[-1,-3],[0,-3],[-1,-3],[0,-4],[1,-1],[1,-3],[1,-3],[41,-96]],[[2699,4377],[-1,0],[-26,0],[-65,0],[-28,0],[-2,0],[-94,0],[-1,0],[-94,1],[-94,0],[-46,0],[-65,0],[-2,0],[-7,0],[-4,0],[-56,0],[-18,0],[-24,0],[-2,0],[-19,0],[-4,0],[-44,0],[-90,0]],[[5854,6352],[-1,-1],[-1,-1],[-4,-5],[-1,-1],[-47,-49],[-1,-1],[-37,-38],[-14,-14],[-1,-1],[-2,-2],[-3,-3],[-2,-2],[-17,-17],[-30,-33],[-12,-12],[-1,-2],[-27,-30],[-2,-2],[-3,-4],[-7,-7],[-15,-15],[0,-1],[-59,-61],[-6,-6],[-35,-39],[-13,-14],[-3,-4],[-33,-36],[-2,-3],[-22,-22],[-42,-45],[-1,-1],[-11,-11],[-2,-2],[-2,-1],[-10,-11],[-1,-1],[-4,-4],[-5,-5],[-6,-6],[-4,-4],[-4,-4],[-27,-17],[-44,-18],[-20,-5],[-34,-9],[-21,-6],[-4,-1],[-19,-5],[-51,-13],[-21,-6]],[[5120,5751],[-1,0],[1,0]],[[2671,8301],[1,-112],[0,-1],[1,-69],[1,-43],[0,-33],[-1,-78],[0,-1],[1,-112],[0,-1],[1,-84],[0,-27],[0,-1],[0,-83],[0,-7],[0,-21],[0,-1]],[[3448,8298],[2,-1],[1,0],[19,-2],[82,-1],[8,0],[1,0],[18,0],[1,0],[18,0],[87,0],[1,0],[1,0],[4,0],[51,0],[21,0],[7,-1],[1,0]],[[3771,8293],[2,-4],[0,-1],[5,-11],[5,-11],[1,-4],[3,-6],[0,-1],[2,-2],[1,-3],[1,-4],[2,-5],[1,-4],[0,-1],[1,-4],[1,-5],[2,-5],[4,-16],[0,-1],[1,-7],[1,-4],[1,-3],[1,-3],[0,-1],[1,-2],[1,-2],[0,-1],[1,-4],[1,-3],[1,-1],[0,-2],[2,-3],[1,-3],[0,-1],[1,-2],[2,-4],[2,-4],[3,-4],[3,-4],[2,-4],[3,-4],[3,-3],[1,-1],[2,-3],[8,-8],[3,-4],[2,-3],[2,-2],[1,-1],[4,-6],[3,-4],[3,-4],[3,-4],[3,-4],[3,-4],[3,-4],[3,-5],[3,-4],[2,-4],[1,-1],[2,-4],[3,-4],[3,-5],[2,-5],[3,-4],[2,-5],[3,-5],[2,-5],[3,-5],[2,-5],[3,-5],[2,-5],[2,-5],[3,-5],[2,-6],[3,-8],[4,-9],[4,-9],[2,-6],[1,-4],[3,-9],[4,-11],[4,-10],[1,-4],[2,-8],[4,-10],[3,-11],[15,-48],[3,-12],[4,-11],[1,-4],[2,-7],[2,-7],[2,-7],[6,-20],[0,-1],[1,-5],[2,-5],[2,-6],[2,-6],[1,-5],[1,-2],[1,-4],[2,-3],[1,-3],[0,-1],[1,-4],[2,-3],[3,-8],[4,-9],[3,-7],[4,-9],[11,-25],[2,-3],[1,-3],[4,-7],[2,-5],[0,-1],[1,-3],[1,-2],[3,-5],[1,-3],[1,-2],[1,-5],[1,0],[2,-5],[1,-4],[0,-1]],[[3574,9429],[0,-2],[-4,-13],[-1,-4],[-2,-5],[-2,-7],[-3,-7],[-6,-18],[-1,0],[-5,-12],[-6,-13],[-4,-10],[-8,-15],[-6,-11],[-15,-26],[-8,-15],[-12,-22],[-1,-2],[-15,-28],[-17,-30],[-15,-27],[-10,-16],[-8,-15],[-10,-18],[-6,-14],[-1,-2],[-4,-11],[-3,-8],[-7,-21],[-5,-22],[-3,-16],[-1,-2]],[[3385,9017],[0,-3],[0,-4],[-1,-5],[0,-4],[0,-1],[0,-2],[-1,-2],[0,-5],[0,-6],[0,-4],[0,-1],[0,-2],[0,-4],[0,-5],[1,-6],[0,-6],[0,-2],[0,-4],[0,-1],[0,-3],[1,-2],[0,-1],[0,-8],[1,-8],[0,-1],[1,-4],[0,-3],[1,-6],[0,-1],[0,-7],[1,-7],[1,-1],[0,-5],[1,-7],[1,-5],[1,-5],[0,-1],[1,-5],[0,-1],[1,-2],[0,-2],[1,-3],[0,-2],[2,-5],[1,-5],[1,-5],[0,-1],[1,-4],[2,-5],[1,-4],[2,-5],[0,-1],[1,-4],[1,0],[0,-2],[1,-2],[2,-5],[1,-4],[2,-4],[2,-4],[1,-3],[2,-4],[2,-4],[2,-3],[2,-4],[1,-3],[2,-3],[2,-4],[2,-4],[3,-4],[8,-13],[3,-5],[3,-5],[4,-5],[2,-4],[2,-3],[5,-8],[6,-7],[4,-7],[1,-1],[6,-8],[5,-8],[7,-8],[6,-9],[6,-7],[4,-5],[2,-4],[2,-2],[5,-6],[7,-9],[1,-1],[0,-1]],[[3524,8638],[6,-7],[4,-5],[4,-5],[2,-2],[21,-26],[7,-9],[12,-15],[7,-9],[6,-8],[6,-7],[6,-7],[8,-12],[8,-10],[4,-6],[2,-2],[3,-4],[0,-1],[4,-5],[4,-6],[5,-6],[0,-1],[6,-6],[9,-13],[12,-16],[14,-18],[5,-7],[3,-4],[7,-9],[5,-7],[4,-7],[5,-6],[4,-6],[4,-5],[0,-1],[4,-6],[4,-5],[3,-6],[4,-5],[3,-6],[3,-5],[4,-5],[3,-5],[2,-5],[3,-5],[3,-5],[4,-8],[4,-9],[4,-8],[2,-4]],[[3044,8844],[0,2],[0,1],[-2,151],[0,1],[0,2],[0,15],[0,1],[1,9],[18,70],[2,10],[25,102],[0,1],[22,96],[1,2],[3,13],[0,1],[3,7],[27,68],[15,30],[1,3],[122,0],[10,0],[176,0],[3,0],[2,0],[6,0],[37,0],[17,0],[23,0],[2,0],[10,0],[6,0],[1,0],[-1,0]],[[4893,7854],[0,2],[0,1],[-1,27],[-1,25],[0,26],[-1,24],[1,21],[4,15],[3,16],[5,14],[4,9],[2,5],[1,2],[3,9],[2,8],[4,13],[1,3],[6,17],[2,16],[1,18],[0,9],[4,89],[-1,85],[0,25],[0,89],[-1,9],[0,1],[0,1],[-4,11],[-1,2],[-16,42],[-7,19],[-1,19],[-64,1],[-4,0],[-8,0],[-68,0],[-53,1],[-58,0],[-65,0],[-95,-1],[-1,0],[-5,0],[-21,0],[-3,0],[-281,0],[-217,-1],[-1,0],[-49,0],[-94,0],[-17,2],[-8,2],[-15,4],[-20,9],[-11,9],[-22,23],[-4,4],[-36,38],[0,1],[-23,20],[-13,0],[-22,0],[-6,0],[-2,0],[-1,0],[-87,0],[-3,0],[-1,0]],[[3385,9017],[1,0],[12,0],[34,0],[15,0],[44,0],[1,0],[1,0],[5,0],[278,1],[19,0],[10,0],[81,1],[63,0],[3,0],[1,0],[30,0],[71,0],[65,1],[8,0],[1,0],[14,0],[41,0],[150,0],[211,1],[13,0],[1,0],[1,0],[8,0],[85,0],[1,0],[9,0],[36,0],[51,1],[1,0],[51,0],[43,0],[22,0],[37,0],[15,0],[1,0],[5,0],[1,0],[5,0],[9,0],[57,0],[19,0],[39,0],[8,0],[70,0],[1,0],[76,0],[11,0],[242,0],[1,0],[64,0],[240,0],[19,0],[18,0],[27,0],[49,0],[96,0],[32,0],[13,0],[13,0],[36,0],[1,0]],[[6071,9022],[0,-3],[-1,-96],[0,-2],[0,-1],[0,-6],[0,-22],[0,-1],[-1,-138],[-1,-113],[-1,-112],[-1,-110],[0,-3],[0,-2],[0,-4],[0,-1]],[[6071,9022],[1,0],[36,1],[10,0],[14,0],[32,0],[96,0],[46,1],[19,0],[11,0],[54,0],[59,0],[11,0],[52,1],[60,0],[66,0],[94,1],[94,0],[184,1],[254,1],[29,0],[9,0],[89,1],[1,0],[80,0],[12,0],[90,1],[6,0],[1,0],[0,-16],[0,-40],[0,-31],[0,-3],[0,-22],[0,-24],[0,-26],[0,-68],[0,-40],[1,-26],[0,-35],[0,-51],[0,-2],[0,-19],[0,-19],[1,-59],[0,-13],[0,-1],[0,-5],[0,-3],[0,-51],[1,-53],[0,-42],[0,-70],[0,-2],[1,-98],[0,-14],[0,-33],[0,-4],[0,-1],[0,-15],[0,-60],[0,-2],[0,-67],[0,-3],[0,-24],[0,-1]],[[4032,3595],[-1,0],[-10,0],[-22,0],[-15,0],[-94,0],[-1,0],[-76,0],[-16,0],[-1,0],[-3,0],[-13,0],[-113,0],[-1,0],[-60,0],[-1,0],[-62,0],[-123,0],[-95,0],[-58,1],[-37,0],[-94,0],[-93,0]]]}; 

mpApp["minnpost-crime"].data["cities/cities"] = {"minneapolis":{"title":"Minneapolis","population":{"2000":382618,"2010":382578}}}; 

mpApp["minnpost-crime"].data["crime/categories"] = {"total":{"title":"Total"},"homicide":{"title":"Homicide"},"rape":{"title":"Rape"},"robbery":{"title":"Robbery"},"agg_assault":{"title":"Aggravated Assault"},"violent":{"title":"Violent Crimes (combined)","combine":["homicide","rape","robbery","agg_assault"]},"burglary":{"title":"Burglary"},"larceny":{"title":"Larceny"},"auto_theft":{"title":"Auto Theft"},"arson":{"title":"Arson"},"property":{"title":"Property Crimes (combined)","combine":["burglary","larceny","auto_theft","arson"]}}; 



this["mpApp"] = this["mpApp"] || {};
this["mpApp"]["minnpost-crime"] = this["mpApp"]["minnpost-crime"] || {};
this["mpApp"]["minnpost-crime"]["templates"] = this["mpApp"]["minnpost-crime"]["templates"] || {};

this["mpApp"]["minnpost-crime"]["templates"]["js/templates/template-application-container.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="mc-application-container grid-container grid-parent">\n\n  <div class="grid-100 messaging-container">\n  </div>\n\n  <div class="grid-100 grid-parent mc-content">\n    <div class="mc-city-view-container">\n    </div>\n\n    <div class="mc-neighborhood-view-container">\n    </div>\n  </div>\n\n  <div class="grid-100 mc-footer">\n  </div>\n</div>\n';

}
return __p
};

this["mpApp"]["minnpost-crime"]["templates"]["js/templates/template-category-select.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
with (obj) {
__p += '\n<form class="category-select-form">\n  <label for="category-select">Select the category of incident:</label>\n  <select id="category-select">\n    ';
 if (typeof categories != 'undefined') { ;
__p += '\n      ';
 var currentCategory = currentCategory || 'total' ;
__p += '\n      ';
 _.each(categories, function(cat, c) { ;
__p += '\n        <option value="' +
((__t = ( c )) == null ? '' : __t) +
'" ';
 if (currentCategory === c) { ;
__p += 'selected="true"';
 } ;
__p += '>' +
((__t = ( cat.title )) == null ? '' : __t) +
'</option>\n      ';
 }) ;
__p += '\n    ';
 } ;
__p += '\n  </select>\n</form>';

}
return __p
};

this["mpApp"]["minnpost-crime"]["templates"]["js/templates/template-city.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
with (obj) {
__p += '<div class="mc-city-container">\n\n  <div class="grid-100 grid-parent mc-location-services hide-on-desktop hide-on-tablet">\n    <h2>Find a neighborhood in <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span></h2>\n    ';
 if (_.isObject(window.navigator) && _.isObject(window.navigator.geolocation)) { ;
__p += '\n      <p><a href="#" class="location-geolocate">Use your current location</a></p>\n    ';
 } ;
__p += '\n\n    <form class="neighborhood-choice-form note bottom-space">\n      <select class="neighborhood-choice">\n        <option value="">-- choose neighborhood --</option>\n      </select>\n    </form>\n\n    <form class="location-search-form bottom-space">\n      <input type="text" class="address-search" value="Find neighborhood by address" data-default="Find neighborhood by address" />\n      <input type="submit" value="GO" />\n    </form>\n  </div>\n\n  <div class="grid-100 bottom-space grid-parent">\n    <div class="mc-left-column grid-60 grid-parent">\n      <div class="mc-title">\n        <h2>\n          <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span>\n          <em><span class="category-title"></span></em>\n          incidents for\n\n          <form class="month-choice-form">\n            <select class="month-choice"></select>\n            <select class="year-choice"></select>\n          </form>\n        </h2>\n\n        <p class="note bottom-space">Select the Month and Year to see historical values.</p>\n\n        <!-- placeholder for changing document title -->\n        <span class="document-title"></span>\n      </div>\n\n      <div class="grid-100 mobile-grid-100 tablet-grid-100 grid-parent bottom-space mc-totals">\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space stat-incidents-month">\n          <span class="stat-value"></span>\n          <span class="stat-symbol"></span>\n          <p class="note">Total incidents</p>\n        </div>\n\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space stat-change-last-month">\n          <span class="stat-value"></span>\n          <span class="stat-symbol"></span>\n          <p class="note">Change from last month (<span class="stat-incidents-last-month"><span class="stat-value"></span></span> incidents)</p>\n        </div>\n\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space stat-change-month-last-year">\n          <span class="stat-value"></span>\n          <span class="stat-symbol"></span>\n          <p class="note">Change from same month last year (<span class="stat-incidents-last-year-month"><span class="stat-value"></span></span> incidents)</p>\n        </div>\n\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space stat-rate-month">\n          <span class="stat-value"></span>\n          <span class="stat-symbol"></span>\n          <p class="note">Incident rate per 1,000 residents</p>\n        </div>\n\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space population-numbers">\n          <span class="stat-value population-2010"></span>\n          <p class="note">2010 census population</p>\n        </div>\n      </div>\n\n      <div class="grid-100 mobile-grid-100 tablet-grid-100 bottom-space grid-parent category-stats">\n        <h2>\n          <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span>\n          incidents by category\n        </h2>\n\n        <p class="note bottom-space">Click on any category to see specific metrics and to update the map.  Percent change is calculated based on the previous month.  <a href="#" class="category-stat category-stat-total" data-category="total">Show all</a>.</p>\n\n        ';
 if (typeof categories != 'undefined') { ;
__p += '\n          ';
 _.each(categories, function(cat, c) { if (c !== 'total') { ;
__p += '\n            <div data-category="' +
((__t = ( c )) == null ? '' : __t) +
'" class="category-stat category-stat-' +
((__t = ( c )) == null ? '' : __t) +
' grid-20 mobile-grid-33 tablet-grid-20">\n              <div class="stat-label">\n                <div class="force-bottom">' +
((__t = ( cat.title )) == null ? '' : __t) +
'</div>\n              </div>\n              <div class="stat-value stat-incidents"></div>\n              <div class="stat-value stat-change note"></div>\n            </div>\n          ';
 } }) ;
__p += '\n        ';
 } ;
__p += '\n      </div>\n    </div>\n\n    <div class="mc-spacer grid-5 grid-parent"> &nbsp; </div>\n\n    <div class="mc-right-column grid-35 grid-parent">\n      <h2>\n        <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span>\n        <em><span class="category-title"></span></em> rate by neighborhood\n      </h2>\n\n      <form class="location-search-form note bottom-space hide-on-mobile">\n        <p>\n          To see detailed neighborhood information, click on the map\n          ';
 if (_.isObject(window.navigator) && _.isObject(window.navigator.geolocation)) { ;
__p += '\n            or <a href="#" class="location-geolocate">use your current location</a>\n          ';
 } ;
__p += '\n        </p>\n\n        <input type="text" class="address-search" value="Find neighborhood by address" data-default="Find neighborhood by address" /> <input type="submit" value="GO" />\n      </form>\n\n      <div id="city-map">\n      </div>\n\n      <div class="note">Crime rate per 1,000 residents.</div>\n      <div class="map-legend">\n      </div>\n    </div>\n  </div>\n\n  <div class="mc-charts">\n    <h2>\n      <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span>\n      <em><span class="category-title"></span></em> incident rate trend over 12-month periods\n    </h2>\n\n    <p class="note">Because crime rates vary significantly each month, this yearly chart shows the rate (incidents per 1,000 residents) for 12-month periods ending with the current month.</p>\n\n    <div class="grid-100 mobile-grid-100 tablet-grid-100 bottom-space">\n      <div id="chart-city-incidents-12-month-history" class="chart"></div>\n    </div>\n  </div>\n</div>\n';

}
return __p
};

this["mpApp"]["minnpost-crime"]["templates"]["js/templates/template-loading.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="loading-container">\n  <div class="loading"><span>Loading...</span></div>\n</div>';

}
return __p
};

this["mpApp"]["minnpost-crime"]["templates"]["js/templates/template-location-search.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
with (obj) {
__p += '<div class="location-search">\n  <form class="location-search-form">\n    <p>\n      Find your neighborhood by \n      ';
 if (typeof geolocation != 'undefined' && geolocation == true) { ;
__p += '\n        <a href="#" class="location-geolocate">using your current location <span></span></a> or \n      ';
 } ;
__p += '\n      entering an address in the search form: <br />\n      <input type="text" class="address-search" /> <input type="submit" value="Search" />\n    </p>\n  </form>\n</div>';

}
return __p
};

this["mpApp"]["minnpost-crime"]["templates"]["js/templates/template-map-label.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
with (obj) {
__p += '<div class="map-label-inner-container">\n  <h4>' +
((__t = ( title )) == null ? '' : __t) +
'</h4>\n  \n  ';
 if (typeof label != 'undefined' && typeof property != 'undefined') { ;
__p += '\n    ' +
((__t = ( label )) == null ? '' : __t) +
': ' +
((__t = ( (typeof formatter != 'undefined') ? formatter(property) : property )) == null ? '' : __t) +
'\n  ';
 } ;
__p += '\n  \n  ';
 if (typeof n.mapCategory != 'undefined') { ;
__p += '\n    <em>' +
((__t = ( n.mapCategory )) == null ? '' : __t) +
'</em> <br />\n    Incidents: ' +
((__t = ( _.formatNumber(n.mapIncidents, 0) )) == null ? '' : __t) +
' <br />\n    Incident rate: ' +
((__t = ( _.formatNumber(n.mapRate) )) == null ? '' : __t) +
' per 1,000 residents\n  ';
 } ;
__p += '\n</div>';

}
return __p
};

this["mpApp"]["minnpost-crime"]["templates"]["js/templates/template-map-legend.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
with (obj) {
__p += '<div class="map-legend-inner clearfix">\n  ';
 _.each(legend, function(l, i) { ;
__p += '\n    <div class="legend-item';
 if (l.color === display) { ;
__p += ' active-display';
 } ;
__p += '" style="width: ' +
((__t = ( (100 / _.size(legend)) )) == null ? '' : __t) +
'%;">\n      <div class="legend-color" style="background-color: ' +
((__t = ( l.color )) == null ? '' : __t) +
'">\n      </div>\n      \n      <div class="legend-value">\n        ' +
((__t = ( _.formatNumber(l.value) )) == null ? '' : __t) +
'\n      </div>\n    </div>\n  ';
 }) ;
__p += '\n</div>';

}
return __p
};

this["mpApp"]["minnpost-crime"]["templates"]["js/templates/template-neighborhood.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
with (obj) {
__p += '<div class="mc-city-container">\n\n  <div class="grid-100 bottom-space grid-parent">\n    <div class="mc-left-column grid-60 grid-parent">\n      <div class="bottom-space mc-title">\n        <h2>\n          <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span>\n          <em><span class="category-title"></span></em> incidents for\n\n          <form class="month-choice-form">\n            <select class="month-choice"></select>\n            <select class="year-choice"></select>\n          </form>\n        </h2>\n\n        <p class="note">\n          <a href="#city/' +
((__t = ( (typeof city != 'undefined') ? city : '' )) == null ? '' : __t) +
'" class="city-link">\n            ' +
((__t = ( (typeof city != 'undefined') ? city : '' )) == null ? '' : __t) +
'\n          </a>\n        </p>\n\n        <!-- placeholder for changing document title -->\n        <span class="document-title"></span>\n      </div>\n\n      <div class="grid-100 mobile-grid-100 tablet-grid-100 grid-parent bottom-space mc-totals">\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space stat-incidents-month">\n          <span class="stat-value"></span>\n          <span class="stat-symbol"></span>\n          <p class="note">Total incidents</p>\n        </div>\n\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space stat-change-last-month">\n          <span class="stat-value"></span>\n          <span class="stat-symbol"></span>\n          <p class="note">Change from last month (<span class="stat-incidents-last-month"><span class="stat-value"></span></span> incidents)</p>\n        </div>\n\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space stat-change-month-last-year">\n          <span class="stat-value"></span>\n          <span class="stat-symbol"></span>\n          <p class="note">Change from same month last year (<span class="stat-incidents-last-year-month"><span class="stat-value"></span></span> incidents)</p>\n        </div>\n\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space stat-rate-month">\n          <span class="stat-value"></span>\n          <span class="stat-symbol"></span>\n          <p class="note">Incident rate per 1,000 residents <br /> (compared to <span class="city-name"></span> rate of <span class="stat-rate-city"><span class="stat-value"></span></span>)</p>\n        </div>\n\n        <div class="grid-33 mobile-grid-50 tablet-grid-33 bottom-space population-numbers">\n          <span class="stat-value population-2010"></span>\n          <p class="note">2010 census population</p>\n        </div>\n      </div>\n\n      <div class="grid-100 mobile-grid-100 tablet-grid-100 bottom-space grid-parent category-stats">\n        <h2>\n          <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span>\n          incidents by category\n        </h2>\n\n        <p class="note bottom-space">Click on any category to see specific metrics and to update the map.  Percent change is calculated based on the previous month.  <a href="#" class="category-stat category-stat-total" data-category="total">Show all</a>.</p>\n\n        ';
 if (typeof categories != 'undefined') { ;
__p += '\n          ';
 _.each(categories, function(cat, c) { if (c !== 'total') { ;
__p += '\n            <div data-category="' +
((__t = ( c )) == null ? '' : __t) +
'" class="category-stat category-stat-' +
((__t = ( c )) == null ? '' : __t) +
' grid-20 mobile-grid-33 tablet-grid-20">\n              <div class="stat-label">\n                <div class="force-bottom">' +
((__t = ( cat.title )) == null ? '' : __t) +
'</div>\n              </div>\n              <div class="stat-value stat-incidents"></div>\n              <div class="stat-value stat-change note"></div>\n            </div>\n          ';
 } }) ;
__p += '\n        ';
 } ;
__p += '\n      </div>\n    </div>\n\n    <div class="mc-spacer grid-5 grid-parent"> &nbsp; </div>\n\n    <div class="mc-right-column grid-35 grid-parent">\n      <h2>\n        <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span>\n        <em><span class="category-title"></span></em> rate\n      </h2>\n\n      <p class="note">\n        <a href="#city/' +
((__t = ( (typeof city != 'undefined') ? city : '' )) == null ? '' : __t) +
'" class="city-link">\n          ' +
((__t = ( (typeof city != 'undefined') ? city : '' )) == null ? '' : __t) +
'\n        </a>\n      </p>\n\n      <div id="neighborhood-map">\n      </div>\n\n      <div class="note">Crime rate per 1,000 residents.</div>\n      <div class="map-legend">\n      </div>\n    </div>\n  </div>\n\n  <div class="mc-charts">\n    <h2>\n      <span class="section-title">' +
((__t = ( (typeof title != 'undefined') ? title : '' )) == null ? '' : __t) +
'</span>\n      <em><span class="category-title"></span></em> incident rate trend over 12-month periods\n    </h2>\n\n    <p class="note">Because crime rates vary significantly each month, this yearly chart shows the rate (incidents per 1,000 residents) for 12-month periods ending with the current month.</p>\n\n    <div class="grid-100 mobile-grid-100 tablet-grid-100 bottom-space">\n      <div id="chart-neighborhood-incidents-12-month-history" class="chart"></div>\n    </div>\n  </div>\n</div>\n';

}
return __p
};

/**
 * Main application container for the MinnPost crime
 */
(function(app, $, undefined) {

  app.Application = Backbone.Router.extend({
    routes: {
      'city/:city(/:category)': 'routeCity',
      'neighborhood/:city/:neighborhood(/:category)': 'routeNeighborhood',
      '*defaultR': 'routeDefault'
    },

    defaultData: [
      'neighborhoods/minneapolis.topo',
      'crime/categories',
      'cities/cities'
    ],

    // Default category
    defaultCategory: 'total',

    initialize: function(options) {
      var thisRouter = this;
      this.category = this.defaultCategory;

      // Set app options
      app.options = _.extend(app.defaultOptions, options);
      app.options.originalTitle = document.title;

      // Create data structures and views
      this.createDataStructures();
      this.createApplicationView();

      // Render applciation view and mark as loading
      this.applicationView.render().renderGeneralLoading();

      // Fetch and parse initial data
      this.fetchData(function() {
        thisRouter.parseData();
        thisRouter.createViews();
        thisRouter.applicationView.renderStopGeneralLoading();
        thisRouter.applicationView.renderParts();
        thisRouter.start();
      });
    },

    // General error handler
    appError: function(message) {
      var thisRouter = this;

      return function(error) {
        if (_.isObject(console) && _.isFunction(console.log)) {
          console.log(error);
        }

        thisRouter.applicationView.renderErrorMessage(message);
      };
    },

    // Get initial data
    fetchData: function(done) {
      var thisRouter = this;

      // Get the compiled data
      app.getLocalData(this.defaultData).done(function() {
        thisRouter.fetchMonths(function(months) {
          thisRouter.allMonths = months;
          thisRouter.currentYear = months[0].year;
          thisRouter.currentMonth = months[0].month;
        })
        .done(done)
        .fail(thisRouter.appError('Issue retrieving current year and month data.'));
      })
      .fail(thisRouter.appError('Issue retrieving base data.'));
    },

    // Get all months and years
    fetchMonths: function(done, context) {
      context = context || this;
      var thisRouter = this;

      var query = "SELECT DISTINCT month, year FROM swdata ORDER BY year DESC, month DESC";
      var defer = app.getRemoteData({ url: app.options.dataCrimeQueryBase.replace('[[[QUERY]]]', encodeURI(query)) });

      if (_.isFunction(done)) {
        $.when(defer).done(function(data) {
          if (_.isObject(data) && !_.isUndefined(data.error)) {
            thisRouter.appError('Issue retrieving current year and month data.')();
          }

          done.apply(context, [data]);
        })
        .fail(thisRouter.appError('Issue retrieving current year and month data.'));
      }
      return defer;
    },

    // Parse initial data
    parseData: function() {
      var thisRouter = this;

      // Add cities to collections
      _.each(app.data['cities/cities'], function(c, id) {
        c.id = id;
        thisRouter.cities.add(new app.ModelCity(c, {
          app: thisRouter
        }));
      });

      // Add neighborhoods to collection
      _.each(topojson.feature(app.data['neighborhoods/minneapolis.topo'],
        app.data['neighborhoods/minneapolis.topo'].objects.neighborhoods).features,
        function(feature, i) {
          var model = _.clone(feature.properties);
          model.id = model.city + '/' + model.key;

          // Take out properties as we will store them in the
          // the model, not in the geoJSON
          delete feature.properties;
          model.geoJSON = feature;
          model.geoJSON.id = model.id;

          // Make id based on city as well
          thisRouter.neighborhoods.add(new app.ModelNeighborhood(model, {
            app: thisRouter
          }));
        }
      );

      return this;
    },

    // Create data structures
    createDataStructures: function() {
      this.cities = new app.CollectionCities([], {
        app: this
      });
      this.neighborhoods = new app.CollectionNeighborhoods([], {
        app: this
      });
    },

    // Create main view
    createApplicationView: function() {
      this.applicationView = new app.ViewContainer({
        el: app.options.el,
        app: this
      });
    },

    // Create sub views
    createViews: function() {
      this.cityView = new app.ViewCity({
        model: this.city,
        app: this,
        el: '.mc-city-view-container'
      });
      this.neighborhoodView = new app.ViewNeighborhood({
        model: this.neighborhood,
        collection: this.neighborhoods,
        app: this,
        el: '.mc-neighborhood-view-container'
      });
      this.cityMapView = new app.ViewNeighborhoodMap({
        collection: this.neighborhoods,
        el: '#city-map',
        app: this
      });
      this.neighborhoodMapView = new app.ViewNeighborhoodMap({
        collection: this.neighborhoods,
        el: '#neighborhood-map',
        app: this
      });
    },

    // Start application (after data has been loaded),
    // specifically start Backbone history
    start: function() {
      Backbone.history.start();
    },

    // Set category
    setCategory: function(category) {
      var oldCat = _.clone(this.category);
      this.category = category;

      if (oldCat != category) {
        this.trigger('change:category');
      }
      this.applicationView.updateCategory(category);
    },

    // Set month.  This was added much later and is a pretty hackish
    // way to make this work.
    setMonth: function(part, val) {
      var test, found;

      if (this[part] != val) {
        this[part] = val;

        this.trigger('change:month');
        if (this.neighborhood && this.neighborhood.cid == this.currentModel.cid) {
          this.updateNeighborhoodView(true);
        }
        else {
          this.updateCityView(true);
        }
      }
    },

    // Default route
    routeDefault: function() {
      this.navigate('/city/minneapolis/total', { trigger: true, replace: true });
    },

    // City route
    routeCity: function(city, category) {
      category = category || this.category || this.defaultCategory;
      var thisRouter = this;

      // Load up city
      city = this.cities.get(city);
      if (_.isUndefined(city)) {
        this.routeDefault();
      }
      else {
        this.city = this.currentModel = city;
        this.setCategory(category);
        this.navigate('/city/' + this.city.id + '/' + this.category, { replace: true });

        // Render
        this.applicationView.renderCity(this.city);
        this.updateCityView();
      }
    },

    // Update city view
    updateCityView: function(reset) {
      reset = reset || false;
      this.applicationView.renderGeneralLoading();

      if (reset) {
        this.city.resetFetch();
        this.neighborhoods.resetFetch();
      }

      this.city.fetchData(function() {
        this.neighborhoods.fetchRecentData(function() {
          this.applicationView.renderStopGeneralLoading();
          this.cityView.stickit();
        }, this);
      }, this);
    },

    // Neightborhood route
    routeNeighborhood: function(city, neighborhood, category) {
      category = category || this.category || this.defaultCategory;
      var thisRouter = this;

      // Load up city
      city = this.cities.get(city);
      if (_.isUndefined(city)) {
        this.routeDefault();
      }
      else {
        this.city = city;
        this.setCategory(category);

        // Load up neighborhood
        neighborhood = this.neighborhoods.get(this.city.id + '/' + neighborhood);
        if (!neighborhood) {
          this.routeDefault();
        }
        this.neighborhood = this.currentModel = neighborhood;
        this.navigate('/neighborhood/' + this.neighborhood.id + '/' + this.category, { replace: true });

        // Render and get both the city and the neighborhood data.
        // The city data will be used for some comparisons
        this.applicationView.renderNeighborhood(this.neighborhood, this.city);
        this.updateNeighborhoodView();
      }
    },

    // Update neighborhood view
    updateNeighborhoodView: function(reset) {
      reset = reset || false;
      this.applicationView.renderGeneralLoading();

      if (reset) {
        this.city.resetFetch();
        this.neighborhood.resetFetch();
        this.neighborhoods.resetFetch();
      }

      this.city.fetchData(function() {
        this.neighborhood.fetchData(function() {
          this.neighborhoods.fetchRecentData(function() {
            this.applicationView.renderStopGeneralLoading();
            this.neighborhoodView.stickit();
          }, this);
        }, this);
      }, this);
    },

    // Route based on geolocation
    routeGeolocate: function(done, context) {
      var thisRouter = this;

      this.applicationView.renderGeneralLoading();
      navigator.geolocation.getCurrentPosition(function(position) {
        if (_.isObject(position.coords)) {
          thisRouter.routeGeoCoordinate([position.coords.longitude, position.coords.latitude],
            done, context);
        }
      }, function(err) {
        thisRouter.appError('Issue retrieving current position.')(err);
      });
    },

    // Route based on address
    routeAddress: function(address, done, context) {
      var thisRouter = this;
      var url = app.options.mapQuestQuery.replace('[[[KEY]]]', app.options.mapQuestKey)
        .replace('[[[ADDRESS]]]', encodeURIComponent(address));

      this.applicationView.renderGeneralLoading();
      $.jsonp({ url: url })
        .done(function(response) {
          var latlng;

          if (_.size(response.results[0].locations) > 0 &&
            _.isObject(response.results[0].locations[0].latLng)) {
            latlng = response.results[0].locations[0].latLng;
            thisRouter.routeGeoCoordinate([latlng.lng, latlng.lat], done, context);
          }
          else {
            thisRouter.appError('Issue retrieving position from address.')(response);
          }
        })
        .fail(thisRouter.appError('Issue retrieving position from address.'));
    },

    // Route based on geo point
    routeGeoCoordinate: function(lonlat, done, context) {
      if (!_.isArray(lonlat)) {
        return;
      }
      var map, found;

      // Not sure which map has rendered, so try both
      view = (!_.isUndefined(this.cityMapView.map)) ? this.cityMapView :
        ((!_.isUndefined(this.neighborhoodMapView.map)) ? this.neighborhoodMapView : false);
      if (_.isObject(view)) {
        // Find neighborhood layer
        found = this.neighborhoods.find(function(n) {
          return app.pip(lonlat, n.get('geoJSON').geometry.coordinates[0]);
        });
        if (found) {
          this.navigate('/neighborhood/' + found.id +
            '/' + this.category, { trigger: true });
        }
        else {
          this.appError('Could not find your location on the map.')(found);
        }
      }
    }
  });

  // Wrapper function to start application
  app.start = function(options) {
    app.router = new app.Application(options);
    return app;
  };
})(mpApp['minnpost-crime'], jQuery);


/**
 * Models for MinnPost crime app
 */
(function(app, $, undefined) {

  /**
   * Basic model for other crime models
   */
  app.ModelCrimeArea = Backbone.Model.extend({
    // See scraper for why this is needed
    dataCrimeQueryWhere: "notes NOT LIKE 'Added to%'",

    // Common initalize
    initialize: function(attrs, options) {
      var thisModel = this;

      this.options = options;
      this.set('categories', app.data['crime/categories']);
      this.set('currentYear', this.options.app.currentYear);
      this.set('currentMonth', this.options.app.currentMonth);
      this.set('appCategory', this.options.app.category);
      this.setLastMonth();
      this.setPopulationYears();

      // Once data is ready, set some stats, and trigger
      // any category changes
      this.on('fetched', function(e) {
        thisModel.setStats();
      });

      // If the app level month/year changes, update
      // the model so that views can react accordingly
      this.options.app.on('change:month', function() {
        thisModel.set('currentYear', thisModel.options.app.currentYear);
        thisModel.set('currentMonth', thisModel.options.app.currentMonth);
        thisModel.setLastMonth();
      });

      // If the app level category changes, update
      // the model so that views can react accordingly
      this.options.app.on('change:category', function() {
        thisModel.set('appCategory', thisModel.options.app.category);
      });

      // If crimes per month change, update the combined categories
      this.on('crimesByMonth', function(e) {
        thisModel.setCombined();
      });
    },

    // Reset fetched markers
    resetFetch: function() {
      this.set('fetched', false);
      this.set('statsSetGlobal', false);
    },

    // Set combined categories
    setCombined: function(data) {
      data = data || _.clone(this.get('crimesByMonth'));
      var categories = this.get('categories');

      _.each(data, function(year, y) {
        _.each(year, function(month, m) {
          _.each(categories, function(cat, c) {
            if (_.isArray(cat.combine) && _.isUndefined(month[c])) {
              data[y][m][c] = _.reduce(cat.combine, function(total, combine) {
                return total + month[combine];
              }, 0);
            }
          });
        });
      });

      this.set('crimesByMonth', data);
      return data;
    },

    // Get category from argument or from app
    getCategory: function(category) {
      if (_.isUndefined(category)) {
        category = this.options.app.category;
      }
      return category;
    },

    // Stats shared across models
    statsSetGlobal: false,
    setStats: function() {
      var thisModel = this;
      var data = _.clone(this.get('crimesByMonth'));
      var stats, city;

      // There's no need to do this more than once
      if (this.get('statsSetGlobal') || !_.isObject(data)) {
        return this;
      }

      // Put stats into object with each category
      stats = _.clone(this.get('stats'));
      stats = stats || {};
      city = (this.get('city')) ? this.options.app.cities.get(this.get('city')) : null;

      // Make stats for each category.
      _.each(this.get('categories'), function(cat, c) {
        stats[c] = stats[c] || {};
        stats[c].incidentsMonth = thisModel.getCrimeByMonth(c);
        stats[c].rateMonth = thisModel.getCrimeRateByMonth(c);

        stats[c].incidentsLastMonth = thisModel.getCrimeByMonth(c,
          thisModel.get('lastMonthYear'), thisModel.get('lastMonthMonth'));
        stats[c].incidentsLastYearMonth = thisModel.getCrimeByMonth(c,
          thisModel.get('currentYear') - 1, thisModel.get('currentMonth'));

        stats[c].changeLastMonth = thisModel.getMonthChange(c,
          thisModel.get('lastMonthYear'), thisModel.get('lastMonthMonth'));
        stats[c].changeMonthLastYear = thisModel.getMonthChange(c,
          thisModel.get('currentYear') - 1, thisModel.get('currentMonth'));

        if (city) {
          stats[c].rateCity = city.getCrimeRateByMonth(c);
        }
      });

      this.set('stats', stats);
      this.set('statsSetGlobal', true);
    },

    // We have population data from 2000 and 2010, so we abstract
    // that out to fill in years
    setPopulationYears: function() {
      var baseData = this.get('population');
      var popData = {};
      var rate = (baseData[2010] - baseData[2000]) / 10;
      var year = 2000;
      var estimate;

      for (year; year <= 2020; year++) {
        // Estimate population based on year, but don't go below 0
        estimate = baseData[2000] + (rate * (year - 2000));
        popData[year] = (estimate < 0) ? 0 : estimate;
      }

      this.set('population', popData);
      return this;
    },

    // Get last month, as it could be last year
    setLastMonth: function() {
      var month = this.get('currentMonth');
      var year = this.get('currentYear');
      var response = [year, month - 1];

      if (month == 1) {
        response = [year - 1, 12];
      }
      this.set('lastMonthMonth', response[1]);
      this.set('lastMonthYear', response[0]);
      return this;
    },

    // Gets years data relative to current month
    getLastYearData: function(category, years) {
      years = years || 1;
      category = this.getCategory(category);

      var data = [];
      var count = 0;

      if (_.isObject(this.get('crimesByMonth'))) {
        var filtered = this.getFilteredCrimesByMonth(
          this.get('currentYear') - years, this.get('currentMonth'),
          this.get('currentYear') - (years - 1), this.get('currentMonth'));

        _.each(filtered, function(year, y) {
          _.each(year, function(month, m) {
            data.push([moment(m.toString(), 'MM').format('MMM'), month[category]]);
          });
        });
      }

      return data;
    },

    // Determine change between two months
    getMonthChange: function(category, year1, month1, year2, month2) {
      year2 = year2 || this.get('currentYear');
      month2 = month2 || this.get('currentMonth');
      category = this.getCategory(category);

      var crime1 = this.getCrimeByMonth(category, year1, month1);
      var crime2 = this.getCrimeByMonth(category, year2, month2);

      // Can't divide by zero, so percentage difference from
      // zero is actually subjective, we choose a value so that a 1
      // change would be 100%
      return (crime2 - crime1) / ((crime1 === 0) ? 1 : crime1);
    },

    // Get crime inciendents for a specific month and year
    getCrimeByMonth: function(category, year, month) {
      year = year || this.get('currentYear');
      month = month || this.get('currentMonth');
      category = this.getCategory(category);
      return this.get('crimesByMonth')[year][month][category];
    },

    // Get total crime inciendents for a specific year
    getCrimeByYear: function(category, year) {
      year = year || this.get('currentYear');
      category = this.getCategory(category);

      return _.reduce(this.get('crimesByMonth')[year], function(memo, month) {
        return memo + month[category];
      }, 0);
    },

    // Get crime rate (crimes / population / 1000) for a specific year
    getCrimeRateByYear: function(category, year) {
      year = year || this.get('currentYear');
      var population = this.get('population')[year];
      var crimes = this.getCrimeByYear(category, year);
      population = (!population) ? 1 : population;

      return (crimes / (population / 1000));
    },

    // Get crime rate (crimes / population / 1000) for a specific month
    getCrimeRateByMonth: function(category, year, month) {
      year = year || this.get('currentYear');
      month = month || this.get('currentMonth');
      var population = this.get('population')[year];
      var crimes = this.getCrimeByMonth(category, year, month);
      population = Math.max((!population) ? 0 : population, 500);

      return (crimes / (population / 1000));
    },

    // Filter crimes
    getFilteredCrimesByMonth: function(year1, month1, year2, month2) {
      year2 = year2 || this.get('currentYear');
      month2 = month2 || this.get('currentMonth');
      var filtered = {};

      _.each(this.get('crimesByMonth'), function(year, y) {
        _.each(year, function(month, m) {
          if ((y == year1 && m > month1) ||
            (y == year2 && m <= month2) ||
            ((year2 - year1) > 1 && y > year1 && y < year2)
          ) {
            filtered[y] = filtered[y] || {};
            filtered[y][m] = month;
          }
        });
      });

      return filtered;
    },

    // Get series of incidents so far this year going back
    // each year
    getIncidentsThisYearHistory: function(category) {
      category = this.getCategory(category);
      var cMonth = this.get('currentMonth');
      var data = [];
      var minYear = 9999;

      // Find the minimum year that has a full years
      // worth of data
      _.each(this.get('crimesByMonth'), function(year, y) {
        minYear = (_.size(year) === 12 && y < minYear) ? y : minYear;
      });

      _.each(this.get('crimesByMonth'), function(year, y) {
        var incidents = 0;

        if (y >= minYear) {
          // Get incidents for previous months
          _.each(year, function(month, m) {
            incidents += (m <= cMonth) ? month[category] : 0;
          });
          data.push([y.toString(), incidents]);
        }
      });

      return data;
    },

    // Get incident rate per year
    getIncidentRatesPerYear: function(category) {
      category = this.getCategory(category);
      var thisModel = this;
      var data = [];
      var minYear = 9999;
      var maxYear = this.get('currentYear') - 1;

      // Find the minimum year that has a full years
      // worth of data
      _.each(this.get('crimesByMonth'), function(year, y) {
        minYear = (_.size(year) === 12 && y < minYear) ? y : minYear;
      });

      // Unless its December, use last year as max
      maxYear = (this.get('currentMonth') === 12) ? this.get('currentYear') : maxYear;

      _.each(this.get('crimesByMonth'), function(year, y) {
        if (y >= minYear && y <= maxYear) {
          data.push([y.toString(), thisModel.getCrimeRateByYear(category, y)]);
        }
      });

      return data;
    },

    // Get dataset of 12 month intervals per years
    get12MonthIntervalsPerYear: function(category) {
      var thisModel = this;
      var data = [];
      var monthData = _.clone(this.get('crimesByMonth'));
      var cYear = this.get('currentYear');
      var cMonth = this.get('currentMonth');
      var cDate = moment(cYear + '-' + cMonth + '-01', 'YYYY-MM-DD');
      var months = 0;
      var intervals = 0;
      var i, m, iS, iE, rate, date, count, x, dS, dE;

      // Find number of months in data and get intervals
      _.each(this.get('crimesByMonth'), function(year, y) {
        months += _.size(year);
      });
      intervals = Math.floor(months / 12);

      // Make sure there are intervals
      if (intervals <= 0) {
        return data;
      }

      // Go through intervals.  moment.month is 0 based!!!
      for (i = intervals; i >= 1; i--) {
        iS = (i * 12) - 1;
        iE = (i * 12) - 12;
        rate = 0;
        count = 0;

        // Go through months to get an average
        for (m = iS; m >= iE; m--) {
          date = moment(cDate);
          date.subtract('months', m);

          // Check if data is there, as there are some holes here and there
          if (_.isObject(monthData[date.year()]) && !_.isUndefined(monthData[date.year()][date.month() + 1])) {
            rate += this.getCrimeRateByMonth(category, date.year(), date.month() + 1);
            count++;
          }
        }
        rate = rate / count;
        dS = moment(cDate).subtract('months', iS);
        dE = moment(cDate).subtract('months', iE);
        x = '' + (dS.month() + 1) + '/' + dS.format('YY') + '-' + (dE.month() + 1) + '/' + dE.format('YY');

        if (!_.isNaN(rate)) {
          data.push([x, rate]);
        }
      }

      return data;
    }
  });

  /**
   * Model for city level data
   */
  app.ModelCity = app.ModelCrimeArea.extend({

    initialize: function() {
      app.ModelCity.__super__.initialize.apply(this, arguments);
    },

    // Set stats values
    setStats: function() {
      app.ModelCity.__super__.setStats.apply(this, arguments);
      return this;
    },

    // Get all that sweet, sweet data
    fetchData: function(done, context) {
      context = context || this;
      var thisModel = this;
      var defers = [];
      var lastMonth;

      if (!this.get('fetched')) {
        // Get data for various months (current, last, and last year)
        defers.push(this.fetchAllDataByMonth());
        $.when.apply($, defers).done(function() {
          var data = _.clone(thisModel.get('crimesByMonth')) || {};

          _.each(arguments[0], function(r) {
            data[r.year] = data[r.year] || {};
            data[r.year][r.month] = r;
          });

          thisModel.setCombined(data);
          thisModel.set('crimesByMonth', data);
          thisModel.set('fetched', true);
          thisModel.trigger('fetched');

          done.apply(context, []);
        });
      }
      else {
        done.apply(context, []);
      }
      return this;
    },

    // Get all data aggregated
    fetchAllDataByMonth: function(done, context) {
      var query = [];

      query.push("SELECT year, month");
      _.each(this.get('categories'), function(category, c) {
        if (!_.isArray(category.combine)) {
          query.push(", SUM(" + c + ") AS " + c);
        }
      });
      query.push(" FROM swdata WHERE " + this.dataCrimeQueryWhere);
      query.push(" GROUP BY year, month ORDER BY year DESC, month DESC");

      var defer = app.getRemoteData({ url: app.options.dataCrimeQueryBase.replace('[[[QUERY]]]', encodeURI(query.join(''))) });

      if (_.isFunction(done)) {
        $.when(defer).done(function(data) {
          done.apply(context, [data[0]]);
        });
      }
      return defer;
    },

    // Get data aggregate by month for previous years
    fetchDataPreviousYearsByMonth: function(year, month, years, done, context) {
      years = (_.isNumber(years)) ? years : 1;
      var query = [];

      query.push("SELECT year, month");
      _.each(this.get('categories'), function(category, c) {
        if (!_.isArray(category.combine)) {
          query.push(", SUM(" + c + ") AS " + c);
        }
      });
      query.push(" FROM swdata WHERE " + this.dataCrimeQueryWhere);
      query.push(" AND ((year = " + year + " AND month <= " + month + ") ");
      if (years > 1) {
        query.push(" OR (year < " + year + " AND year > " + (year - years) + ")");
      }
      query.push(" OR (year = " + (year - years) + " AND month >= " + month + "))");
      query.push(" GROUP BY year, month ORDER BY year DESC, month DESC");

      var defer = app.getRemoteData({ url: app.options.dataCrimeQueryBase.replace('[[[QUERY]]]', encodeURI(query.join(''))) });

      if (_.isFunction(done)) {
        $.when(defer).done(function(data) {
          done.apply(context, [data[0]]);
        });
      }
      return defer;
    }
  });

  /**
   * Model for neighborhood level data
   */
  app.ModelNeighborhood = app.ModelCrimeArea.extend({

    initialize: function() {
      app.ModelNeighborhood.__super__.initialize.apply(this, arguments);
    },

    // Set stats values
    statsSet: false,
    setStats: function() {
      app.ModelCity.__super__.setStats.apply(this, arguments);
      return this;
    },

    // Get all that sweet, sweet data
    fetchData: function(done, context) {
      context = context || this;
      var thisModel = this;
      var defers = [];

      if (!this.get('fetched')) {
        defers.push(this.fetchDataAllData());
        $.when.apply($, defers).done(function() {
          var data = _.clone(thisModel.get('crimesByMonth')) || {};

          _.each(arguments[0], function(r) {
            data[r.year] = data[r.year] || {};
            data[r.year][r.month] = r;
          });

          thisModel.setCombined(data);
          thisModel.set('crimesByMonth', data);
          thisModel.set('fetched', true);
          thisModel.trigger('fetched');

          done.apply(context, []);
        });
      }
      else {
        done.apply(context, []);
      }
      return this;
    },

    // Get all data for neighborhood
    fetchDataAllData: function(done, context) {
      var query = [];

      query.push("SELECT * FROM swdata WHERE " + this.dataCrimeQueryWhere);
      query.push(" AND neighborhood_key = '" + this.get('key') + "' ");
      query.push(" ORDER BY year DESC, month DESC");

      var defer = app.getRemoteData({ url: app.options.dataCrimeQueryBase.replace('[[[QUERY]]]', encodeURI(query.join(''))) });

      if (_.isFunction(done)) {
        $.when(defer).done(function(data) {
          done.apply(context, [data[0]]);
        });
      }
      return defer;
    }
  });


})(mpApp['minnpost-crime'], jQuery);


/**
 * Collections for MinnPost crime app
 */
(function(app, $, undefined) {

  /**
   * Collection for city models
   */
  app.CollectionCities = Backbone.Collection.extend({
    model: app.ModelCity

  });

  /**
   * Collection for neighborhood models
   */
  app.CollectionNeighborhoods = Backbone.Collection.extend({
    model: app.ModelNeighborhood,
    comparator: 'id',

    initialize: function() {
      this.resetFetch();
    },

    // Reset fetched markers
    resetFetch: function() {
      this.fetchedRecentData = false;
    },

    // Get data for all neighorhoods for the last two months
    fetchRecentData: function(done, context) {
      var thisCollection = this;
      var query = [];
      var model = this.at(0);
      var defer;
      var year = model.get('currentYear');
      var month = model.get('currentMonth');

      // Only do this once
      if (!this.fetchedRecentData) {
        query.push("SELECT * ");
        query.push(" FROM swdata WHERE " + model.dataCrimeQueryWhere);
        query.push(" AND ((year = " + model.get('currentYear') + "");
        query.push(" AND month = " + model.get('currentMonth') + ")");
        query.push(" OR (year = " + model.get('lastMonthYear') + "");
        query.push(" AND month = " + model.get('lastMonthMonth') + "))");
        query.push(" ORDER BY year DESC, month DESC");
        defer = app.getRemoteData({ url: app.options.dataCrimeQueryBase.replace('[[[QUERY]]]', encodeURI(query.join(''))) });

        if (_.isFunction(done)) {
          $.when(defer).done(function(data) {
            // Put data into the models
            thisCollection.each(function(m) {
              var crimesByMonth = _.clone(m.get('crimesByMonth')) || {};
              _.each(data, function(d) {
                if (d.neighborhood_key === m.get('key')) {
                  crimesByMonth[d.year] = crimesByMonth[d.year] || {};
                  crimesByMonth[d.year][d.month] = d;
                }
              });

              crimesByMonth = m.setCombined(crimesByMonth);
              m.set('crimesByMonth', crimesByMonth);
            });
            // Some stats are relative to the whole
            /*
            thisCollection.each(function(m) {
              m.setStats();
            });
            */

            if (_.isFunction(done)) {
              done.apply(context, [data[0]]);
            }
            thisCollection.fetchedRecentData = true;
            thisCollection.trigger('fetchedRecentData');
          });
        }
        return defer;
      }
      else {
        thisCollection.trigger('fetchedRecentData');
        if (_.isFunction(done)) {
          done.apply(context, []);
        }
        return this;
      }
    }
  });

})(mpApp['minnpost-crime'], jQuery);


/**
 * Views for MinnPost crime app
 */
(function(app, $, undefined) {

  /**
   * Main application view
   */
  app.ViewContainer = Backbone.View.extend({
    initialize: function() {
      this.templates = this.templates || {};
    },

    events: {
      'click .location-geolocate': 'handleGeolocate',
      'submit .location-search-form': 'handleAddressSearch',
      'change #category-select': 'handleCategoryChange',
      'change .neighborhood-choice': 'handleNeighborhoodChoiceChange',
      'click .category-stat': 'handleCategoryChoice',
      'focus .address-search': 'handleAddressInputFocus',
      'blur .address-search': 'handleAddressInputBlur'
    },

    // Main template render
    render: function() {
      // Render container
      app.getTemplate('template-application-container', function(template) {
        this.templates['template-application-container'] = template;
        $(this.el).html(template({ }));
      }, this);
      return this;
    },

    // Render sub parts
    renderParts: function() {
      // Render city and neighborhood view
      this.options.app.cityView.render();
      this.options.app.cityMapView.render();
      this.options.app.neighborhoodView.render();
      this.options.app.neighborhoodMapView.render();

      // Render category select
      app.getTemplate('template-category-select', function(template) {
        this.templates['template-category-select'] = template;
        $(this.el).find('.category-select-container').html(template({
          categories: app.data['crime/categories'],
          currentCategory: this.options.app.category
        }));
      }, this);

      return this;
    },

    // Render City view
    renderCity: function(cityModel) {
      var thisView = this;

      // Render map
      this.options.app.cityMapView.model = cityModel;
      this.options.app.cityMapView.renderMap();

      // Set model for view
      this.options.app.cityView.model = cityModel;

      // Animate transition
      this.options.app.cityView.$el.slideDown(function() {
        thisView.options.app.cityMapView.updateMapView();
      });
      this.options.app.neighborhoodView.$el.slideUp();

      this.options.app.cityView.unstickit();
      this.options.app.cityView.stickit();

      return this;
    },

    // Render Neighborhood view
    renderNeighborhood: function(neighborhoodModel, cityModel) {
      var thisView = this;

      // Render/update mao
      thisView.options.app.neighborhoodMapView.model = neighborhoodModel;
      thisView.options.app.neighborhoodMapView.renderMap(false);

      // Set model
      this.options.app.neighborhoodView.model = neighborhoodModel;

      // Animate
      this.options.app.neighborhoodView.$el.slideDown(function() {
        thisView.options.app.neighborhoodMapView.updateMapView(false);
        thisView.options.app.neighborhoodMapView.mapFocusNeighborhood(neighborhoodModel);
      });
      this.options.app.cityView.$el.slideUp();

      this.options.app.neighborhoodView.unstickit();
      this.options.app.neighborhoodView.stickit();

      return this;
    },

    // Display loading
    renderLoading: function(el) {
      var $el = (_.isUndefined(el)) ? $(this.el) : $(this.el).find(el);

      app.getTemplate('template-loading', function(template) {
        $el.html(template({ }));
      }, this);
      return this;
    },

    // Display loading specifically in the header
    renderGeneralLoading: function() {
      this.renderLoading('.messaging-container');
      return this;
    },

    // Stop general loading
    renderStopGeneralLoading: function() {
      this.$el.find('.messaging-container .loading').fadeOut(function() {
        $(this).remove();
      });
      return this;
    },

    // General message
    renderMessage: function(message) {
      this.$el.find('.messaging-container').html(message).fadeIn();
      return this;
    },

    // General message
    renderErrorMessage: function(message) {
      message = '<div class="application-error">' + message + '</span>';
      this.renderMessage(message);
      return this;
    },

    // Update category change.  This is needed as we don't have
    // a two way connection between the select and the category
    // value
    updateCategory: function(category) {
      var $catFound = $('div.category-stat[data-category=' + category + ']');

      // Update dropdown
      this.$el.find('#category-select').val(category);

      // Update category stats.  If the category is total or
      // otherwise not in the list, then reset, otherwise,
      // highlight the right one
      if ($catFound.size() > 0) {
        $('.category-stat').each(function() {
          var $this = $(this);

          if ($this.data('category') === category) {
            $this.removeClass('not-selected');
          }
          else {
            $this.addClass('not-selected');
          }
        });
      }
      else {
        $('.category-stat').removeClass('not-selected');
      }
    },

    // Handle if category select changes
    handleCategoryChange: function(e) {
      e.preventDefault();
      this.changeCategory($(e.currentTarget).val());
    },

    // Handle choosing category
    handleCategoryChoice: function(e) {
      e.preventDefault();
      this.changeCategory($(e.currentTarget).data('category'));
    },

    // Handle neighborhood change dropdown
    handleNeighborhoodChoiceChange: function(e) {
      var $target = $(e.currentTarget);
      e.preventDefault();

      if (!_.isUndefined($target.val()) && $target.val() !== '') {
        this.changeNeighborhood($target.val());
      }
    },

    // Change category
    changeCategory: function(category) {
      var prefix = (Backbone.history) ? Backbone.history.fragment : false;
      var model = this.options.app.currentModel;

      if (category && prefix && model) {
        this.options.app.navigate(prefix.split('/')[0] + '/' +
          model.id + '/' + category, { trigger: true });
      }
    },

    // Change neighborhood
    changeNeighborhood: function(neighborhood) {
      var model = this.options.app.currentModel;
      var category = model.get('appCategory');

      if (category) {
        this.options.app.navigate('neighborhood' + '/' +
          neighborhood + '/' + category, { trigger: true });
      }
    },

    // Handle geolocation event.  The map needs to be loaded
    handleGeolocate: function(e) {
      e.preventDefault();
      this.options.app.routeGeolocate();
    },

    // Handle address search event
    handleAddressSearch: function(e) {
      e.preventDefault();
      var $target = $(e.currentTarget).find('.address-search');

      if ($target.val() && $target.val() !== $target.data('default')) {
        this.options.app.routeAddress($target.val());
      }
    },

    // Handle focus on address earch bar
    handleAddressInputFocus: function(e) {
      var $target = $(e.currentTarget);

      $target.addClass('selected');
      if ($target.val() === $target.data('default')) {
        $target.val('');
      }
    },

    // Handle blur on address earch bar
    handleAddressInputBlur: function(e) {
      var $target = $(e.currentTarget);

      $target.removeClass('selected');
      if ($target.val() === '') {
        $target.val($target.data('default'));
      }
    }
  });

  /**
   * View that holds common binding functions
   */
  app.ViewBinding = Backbone.View.extend({

    // Default chart options
    chartOptions: {
      chart: {
        type: 'line',
        style: {
          fontFamily: '"HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif',
          color: '#BCBCBC'
        }
      },
      colors: ['#094C86', '#BCBCBC'],
      credits: {
        enabled: false
      },
      title: {
        enabled: false,
        text: ''
      },
      legend: {
        borderWidth: 0
      },
      plotOptions: {
        line: {
          lineWidth: 4,
          states: {
            hover: {
              lineWidth: 5
            }
          },
          marker: {
            fillColor: '#ffffff',
            lineWidth: 2,
            lineColor: null,
            symbol: 'circle',
            enabled: false,
            states: {
              hover: {
                enabled: true
              }
            }
          }
        }
      },
      xAxis: {
        title: { },
        type: 'category'
      },
      yAxis: {
        title: {
          enabled: false,
          text: 'Incident rate<br />(per 1,000 residents)',
          margin: 40,
          style: {
            color: 'inherit',
            fontWeight: 'normal'
          }
        },
        min: 0,
        gridLineColor: '#BCBCBC'
      },
      tooltip: {
        //shadow: false,
        //borderRadius: 0,
        //borderWidth: 0,
        style: {},
        useHTML: true,
        formatter: function() {
          return '<strong>' + this.series.name + '</strong><br />' +
            _.formatNumber(this.y, 2) + ' incidents per 1,000 residents<br /><br />' +
            '<em>For months ' + this.key + '</em>';
        }
      }
    },

    commonBindings: {
      '.section-title': {
        observe: 'title',
        update: 'bindUpdateFade'
      },
      '.document-title': {
        observe: ['title', 'appCategory'],
        update: 'bindUpdateDocumentTitle'
      },
      '.population-numbers': {
        observe: 'population',
        update: 'bindUpdatePopulation'
      },
      '.current-month': {
        observe: 'currentMonth',
        update: 'bindUpdateSlide',
        onGet: 'bindSetFormatMonth'
      },
      '.current-year': {
        observe: 'currentYear',
        update: 'bindUpdateSlide'
      },

      // Month and year input
      'select.year-choice': {
        observe: 'currentYear',
        selectOptions: {
          collection: function() {
            return _.first(_.uniq(_.pluck(this.options.app.allMonths, 'year')), 10);
          }
        },
        onSet: 'bindSetMonth'
      },
      'select.month-choice': {
        observe: 'currentMonth',
        selectOptions: {
          collection: function() {
            return _.map(_.uniq(_.pluck(this.options.app.allMonths, 'month')), function(m, mi) {
              return {
                value: m,
                label: moment().month(m - 1).format('MMMM')
              };
            });
          }
        },
        onSet: 'bindSetMonth'
      },

      // Categories
      '.category-title': {
        observe: 'appCategory',
        update: 'bindUpdateSlide',
        onGet: 'bindSetFormatCategoryTitle'
      },
      '.category-stats': {
        observe: 'crimesByMonth',
        update: 'bindUpdateCategoryCrime'
      },

      // Stats
      '.stat-incidents-month .stat-value': {
        observe: ['stats', 'appCategory'],
        update: 'bindUpdateStat',
        options: {
          stat: 'incidentsMonth',
          formatter: 'formatNumber',
          argument: 0
        }
      },
      '.stat-rate-month > .stat-value': {
        observe: ['stats', 'appCategory'],
        update: 'bindUpdateIncidentRate'
      },
      '.stat-incidents-last-month .stat-value': {
        observe: ['stats', 'appCategory'],
        update: 'bindUpdateStat',
        options: {
          stat: 'incidentsLastMonth',
          formatter: 'formatNumber',
          argument: 0
        }
      },
      '.stat-incidents-last-year-month .stat-value': {
        observe: ['stats', 'appCategory'],
        update: 'bindUpdateStat',
        options: {
          stat: 'incidentsLastYearMonth',
          formatter: 'formatNumber',
          argument: 0
        }
      },
      '.stat-change-last-month > .stat-value': {
        observe: ['stats', 'appCategory'],
        update: 'bindUpdateStat',
        options: { stat: 'changeLastMonth' }
      },
      '.stat-change-month-last-year > .stat-value': {
        observe: ['stats', 'appCategory'],
        update: 'bindUpdateStat',
        options: { stat: 'changeMonthLastYear' }
      }
    },

    // Format month
    bindSetFormatMonth: function(val, options) {
      return (val) ? moment(val.toString(), 'MM').format('MMMM') : '';
    },

    // Format category title
    bindSetFormatCategoryTitle: function(val, options) {
      return (val && _.isObject(this.model)) ? this.model.get('categories')[val].title : '';
    },

    // Input year or month changes
    bindSetMonth: function(val, options) {
      var app = this.options.app;
      var part = options.observe;
      var test, found;

      // Validate here so we can try to avoid updating everything.
      // This is pretty stupid
      test = {
        currentMonth: app.currentMonth,
        currentYear: app.currentYear
      };
      test[part] = val;
      found = _.find(app.allMonths, function(m, mi) {
        return _.isEqual(m, {
          month: test.currentMonth,
          year: test.currentYear
        });
      });
      if (!found) {
        // Not sure how to use stickit to do this in more sane way
        this.$('select.year-month').val(app.currentMonth);
        this.$('select.year-choice').val(app.currentYear);
        return;
      }

      app.setMonth(part, val);
      return val;
    },

    // Animate count to value
    bindUpdateCount: function($el, val, model, options) {
      if (_.isNumber(val)) {

        // Determine number and formatting
        var parsed = parseFloat(_.stripNumber($el.text()));
        var number = (_.isNaN(parsed)) ? 0 : parsed;
        var formatOption = (_.isObject(options.options) && options.options.formatter) ?
          options.options.formatter : 'formatPercentChangeStyled';
        var formatArgument = (_.isObject(options.options)) ? options.options.argument : undefined;
        var formatter = (_.isFunction(formatOption)) ? formatOption :
          ((_.isFunction(_[formatOption])) ? _[formatOption] : function(v) { return v; } );
        var interval, intervalID, greaterThan;

        // Hackery for percents
        if (formatOption.indexOf('Percent') > 0) {
          number = number / 100;
        }

        // If different, start counting
        if (_.isNumber(val) && val != number) {
          greaterThan = (val > number);
          interval = (val - number) / 40;

          intervalID = setInterval(function() {
            number = number + interval;
            $el.html(formatter(number, formatArgument));

            if ((greaterThan && number >= val) || (!greaterThan && number <= val)) {
              $el.html(formatter(val, formatArgument));
              clearInterval(intervalID);
            }
          }, 20);
        }
        else {
          $el.html(formatter(val, formatArgument));
        }
      }
    },

    // Update current month
    bindUpdateCurrentMonthDisplay: function($el, val, model, options) {
      var month = (val) ? moment(val.toString(), 'MM').format('MMMM') : '';
      var year = model.get('currentYear');
      this.bindUpdateFade($el, (month && year) ? month + ', ' + year : '', model, options);
    },

    // Fade out then in
    bindUpdateFade: function($el, val, model, options) {
      if ($el.text() !== val && $el.html() !== val) {
        $el.fadeOut('fast', function() {
          $el.html(val).fadeIn('fast');
        });
      }
    },

    // Slide up, slide down
    bindUpdateSlide: function($el, val, model, options) {
      if ($el.text() !== val && $el.html() !== val) {
        $el.slideUp('fast', function() {
          $el.html(val).slideDown('fast');
        });
      }
    },

    // Update document title
    bindUpdateDocumentTitle: function($el, val, model, options) {
      var cat = model.get('categories')[model.get('appCategory')].title;
      document.title = app.options.originalTitle + ' | ' +
        model.get('title') + ' | ' + cat;
    },

    // Update crime categories based on last month
    bindUpdateCategoryCrime: function($el, val, model, options) {
      if (!_.isUndefined(model.get('crimesByMonth'))) {
        var incidentOptions = _.extend(_.clone(options),
          { options: { formatter: 'formatNumber', argument: 0 }});

        _.each(model.get('categories'), function(cat, c) {
          var stat, $statEl;

          // Incidents
          stat = model.getCrimeByMonth(c, model.get('currentYear'), model.get('currentMonth'));
          $statEl = $el.find('.category-stat-' + c + ' .stat-incidents');
          this.bindUpdateCount($statEl, stat, model, incidentOptions);

          // Change
          stat = model.getMonthChange(c, model.get('lastMonthYear'), model.get('lastMonthMonth'));
          $statEl = $el.find('.category-stat-' + c + ' .stat-change');
          this.bindUpdateCount($statEl, stat, model, options);
        }, this);
      }
    },

    // Update a stat value
    bindUpdateStat: function($el, val, model, options) {
      var stat = (_.isObject(options.options)) ? options.options.stat : false;
      var stats = model.get('stats');

      if (stat && stats && _.isNumber(stats[model.get('appCategory')][stat])) {
        this.bindUpdateCount($el, stats[model.get('appCategory')][stat], model, options);
      }
    },

    // Update neighborhood incident rate value
    bindUpdateIncidentRate: function($el, val, model, options) {
      var stat = 'rateMonth';
      var city = model.get('city');
      var stats = model.get('stats');
      var cityStat;

      // If a neighborhood, then format differently
      if (!_.isUndefined(city)) {
        if (stats && _.isNumber(stats[model.get('appCategory')][stat]) &&
          _.isNumber(stats[model.get('appCategory')].rateCity)) {
          options.options = {
            stat: stat,
            formatter: 'formatDifferenceStyled',
            argument: stats[model.get('appCategory')].rateCity
          };
          this.bindUpdateStat($el, val, model, options);
        }
      }
      else {
        options.options = {
          stat: stat,
          formatter: 'formatNumber'
        };
        this.bindUpdateStat($el, val, model, options);
      }
    },

    // Update populations numbers
    bindUpdatePopulation: function($el, val, model, options) {
      var population = model.get('population');
      options.options = { formatter: 'formatNumber', argument: 0 };

      if (_.isObject(population) && !_.isUndefined(population[2010])) {
        this.bindUpdateCount($el.find('.population-2010'), population[2010], model, options);
        this.bindUpdateCount($el.find('.population-2000'), population[2000], model, options);
      }
    },

    // Chart showing last 12 months
    bindUpdateChartLast12Months: function($el, val, model, options) {
      var data1 = model.getLastYearData(model.get('appCategory'), 1);
      var data2 = model.getLastYearData(model.get('appCategory'), 2);
      var chartOptions = _.clone(this.chartOptions);

      chartOptions.seriesColors = ['#BCBCBC', '#094C86'];
      this.drawGraph($el.attr('id'), [data2, data1], chartOptions);
    },

    // Chart to show how many incidents this year with history
    bindUpdateIncidentsThisYearHistory: function($el, val, model, options) {
      var data = model.getIncidentsThisYearHistory();
      this.drawGraph($el.attr('id'), [data], this.chartOptions);
    },

    // Show incident rate per full year
    bindUpdateChartIncidentRatePerYear: function($el, val, model, options) {
      var data = model.getIncidentRatesPerYear();
      var chartOptions = _.clone(this.chartOptions);
      chartOptions.axes.yaxis.tickOptions = {};
      this.drawGraph($el.attr('id'), [data], chartOptions);
    },

    // Show incident rate for 12 month intervals
    bindUpdateChart12MonthHistory: function($el, val, model, options) {
      var series = [{
        name: model.get('title'),
        data: model.get12MonthIntervalsPerYear()
      }];
      var chartOptions = _.clone(this.chartOptions);
      var city;

      // Get city line as well
      if (model.get('city')) {
        city = model.options.app.cities.get(model.get('city'));
        series.push({
          name: city.get('title'),
          data: city.get12MonthIntervalsPerYear()
        });
      }

      if (series[0].data && _.size(series[0].data) > 0) {
        this.drawGraph($el.attr('id'), series, chartOptions);
      }
    },

    // Update the coloring of the map based on category
    updateMapVisualization: function(category, mapView) {
      if (!this.options.app.neighborhoods.fetchedRecentData || _.isUndefined(this.model)) {
        return;
      }

      mapView = mapView || 'cityMapView';
      category = this.model.getCategory();
      categoryObject = this.model.get('categories')[category];

      // Since we use the same neighborhood models
      // for city view and individual eighborhood view,
      // we don't want to step on toes and set
      // the category, unnecessarily
      this.options.app.neighborhoods.each(function(n) {
        n.set('mapRate', n.getCrimeRateByMonth(category));
        n.set('mapIncidents', n.getCrimeByMonth(category));
        n.set('mapCategory', categoryObject.title);
      });
      this.options.app[mapView].mapVisualizeNeighborhoods('mapRate');

      return this;
    },

    // Abstract draw graph
    drawGraph: function(id, data, options) {
      var dataPresent = true;
      var plot;

      // Check data
      _.each(data, function(dataSet) {
        if (!_.isObject(dataSet) || !_.isArray(dataSet.data) || dataSet.data.length <= 0) {
          dataPresent = false;
        }
      });

      // If data present element exists
      if (dataPresent && $('#' + id).length > 0) {
        options.series = data;
        $('#' + id).highcharts(options);
      }
    },

    // Fill neighborhood select
    fillNeighborhoodChoices: function() {
      var $select = $('.neighborhood-choice');

      if ($select.size() > 0) {
        this.options.app.neighborhoods.each(function(n) {
          $select.append('<option value="' + n.id + '">' + n.get('title') + '</option>');
        });
      }
    }
  });

  /**
   * View for city
   */
  app.ViewCity = app.ViewBinding.extend({
    model: app.ModelCity,

    initialize: function() {
      var thisView = this;
      this.bindings = this.bindings || {};
      this.bindings = _.extend(this.commonBindings, this.bindings);

      // Trigger color change
      this.options.app.neighborhoods.on('fetchedRecentData', function(e) {
        thisView.updateMapVisualization(undefined, 'cityMapView');
      });
    },

    bindings: {
      // Charts
      '#chart-city-incidents-12-month-history': {
        observe: ['crimesByMonth', 'appCategory', 'currentMonth', 'currentYear'],
        update: 'bindUpdateChart12MonthHistory'
      },
      '#chart-city-last-year': {
        observe: ['crimesByMonth', 'appCategory'],
        update: 'bindUpdateChartLast12Months'
      },
      '#chart-city-incidents-this-year-history': {
        observe: ['crimesByMonth', 'appCategory'],
        update: 'bindUpdateIncidentsThisYearHistory'
      },
      '#chart-city-incident-rate-per-year': {
        observe: ['crimesByMonth', 'appCategory'],
        update: 'bindUpdateChartIncidentRatePerYear'
      },
      // Map
      '#city-map': {
        observe: ['appCategory', 'crimesByMonth'],
        update: 'bindUpdateMapVisualization'
      }
    },

    // Main render container
    render: function() {
      var data = (_.isObject(this.model)) ? this.model.toJSON() :
        { categories: app.data['crime/categories'] };

      app.getTemplate('template-city', function(template) {
        this.$el.html(template(data));
        this.fillNeighborhoodChoices();
      }, this);
      return this;
    },

    // Binder for map visulization update
    bindUpdateMapVisualization: function($el, val, model, options) {
      this.updateMapVisualization(model.getCategory(), 'cityMapView');
    }
  });

  /**
   * View for neighborhood
   */
  app.ViewNeighborhood = app.ViewBinding.extend({
    model: app.ModelNeighborhood,

    initialize: function() {
      var thisView = this;
      this.bindings = this.bindings || {};
      this.bindings = _.extend(this.commonBindings, this.bindings);

      // Trigger color change when all neighborhood data comes in
      this.options.app.neighborhoods.on('fetchedRecentData', function(e) {
        thisView.updateMapVisualization(undefined, 'neighborhoodMapView');
      });
    },

    bindings: {
      '.city-link': {
        observe: 'city',
        update: 'bindUpdateCityLink'
      },
      '.city-name': {
        observe: 'city',
        update: 'bindUpdateCityName'
      },
      '.stat-rate-city .stat-value': {
        observe: ['stats', 'appCategory'],
        update: 'bindUpdateStat',
        options: {
          stat: 'rateCity',
          formatter: 'formatNumber'
        }
      },
      // Charts
      '#chart-neighborhood-incidents-12-month-history': {
        observe: ['crimesByMonth', 'appCategory', 'currentYear', 'currentMonth'],
        update: 'bindUpdateChart12MonthHistory'
      },
      '#chart-neighborhood-last-year': {
        observe: ['crimesByMonth', 'appCategory'],
        update: 'bindUpdateChartLast12Months'
      },
      '#chart-neighborhood-incident-rate-per-year': {
        observe: ['crimesByMonth', 'appCategory'],
        update: 'bindUpdateChartIncidentRatePerYear'
      },
      '#chart-neighborhood-incidents-this-year-history': {
        observe: ['crimesByMonth', 'appCategory'],
        update: 'bindUpdateIncidentsThisYearHistory'
      },
      // Map
      '#neighborhood-map': {
        observe: ['appCategory', 'crimesByMonth'],
        update: 'bindUpdateMapVisualization'
      }
    },

    bindUpdateCityLink: function($el, val, model, options) {
      var city = this.options.app.cities.get(val);
      if (_.isObject(city)) {
        $el.attr('href', '#city/' + city.id);
        this.bindUpdateFade($el, 'Back to ' + city.get('title') + ' overview &crarr;', model, options);
      }
    },

    bindUpdateCityName: function($el, val, model, options) {
      var city = this.options.app.cities.get(val);
      if (_.isObject(city)) {
        $el.attr('href', '#city/' + city.id);
        this.bindUpdateFade($el, city.get('title'), model, options);
      }
    },

    // Binder for map visulization update
    bindUpdateMapVisualization: function($el, val, model, options) {
      this.updateMapVisualization(val, 'neighborhoodMapView');
    },

    // Initial render (probably won't have fetched data)
    render: function() {
      var data = (_.isObject(this.model)) ? this.model.toJSON() :
        { categories: app.data['crime/categories'] };

      app.getTemplate('template-neighborhood', function(template) {
        this.$el.html(template(data));
      }, this);
      return this;
    }

  });

  /**
   * View for neighborhood map
   */
  app.ViewNeighborhoodMap = app.ViewBinding.extend({
    collection: app.CollectionNeighborhoods,

    styleDefault: {
      stroke: true,
      color: '#424242',
      weight: 1,
      opacity: 0.8,
      fill: true,
      fillColor: '#DFDFDF', //#107F3E
      fillOpacity: 0.7
    },

    initialize: function() {
      this.mapRendered = false;
      this.templates = this.templates || {};

      // Get hover template.  This should be use
      // with a callback
      app.getTemplate('template-map-label', function(template) {
        this.templates = this.templates || {};
        this.templates['template-map-label'] = template;
      }, this);

      // Get legend template.
      app.getTemplate('template-map-legend', function(template) {
        this.templates['template-map-legend'] = template;
      }, this);

      // Set legend element
    },

    // Get legend element
    getLegendEl: function() {
      if (_.isUndefined(this.$legendEl) || !_.isObject(this.$legendEl) ||
        this.$legendEl.length === 0) {
        this.$legendEl = this.$el.parent().find('.map-legend');
      }
      return this.$legendEl;
    },

    // Renders out collection
    render: function() {
      return this;
    },

    // Render map
    renderMap: function(fitGroup) {
      fitGroup = (!_.isUndefined(fitGroup)) ? fitGroup : true;
      var thisView = this;
      var baseLayer = new L.tileLayer('//{s}.tiles.mapbox.com/v3/minnpost.map-wi88b700/{z}/{x}/{y}.png');

      if (_.isUndefined(this.el)) {
        this.setElement(this.$el.selector);
      }

      // Only render the map once
      if (this.mapRendered === false) {
        this.map = new L.Map(this.el, {
          scrollWheelZoom: false,
          minZoom: 10,
          maxZoom: 17
        });
        this.map.setView([44.9800, -93.2636], 12);
        this.map.addLayer(baseLayer);
        this.map.attributionControl.setPrefix(false);
        this.renderLabelContainer();

        this.featureGroup = new L.featureGroup();

        this.collection.each(function(n) {
          var layer = new L.geoJson(n.get('geoJSON'));

          layer.setStyle(thisView.styleDefault);
          thisView.featureGroup.addLayer(layer);

          layer.on('mouseover', thisView.bindMapFeatureMouseover, thisView);
          layer.on('mouseout', thisView.bindMapFeatureMouseout, thisView);
          layer.on('click', thisView.bindMapFeatureClick, thisView);
          thisView.map.addLayer(layer);
        });
        this.mapRendered = true;

        if (fitGroup) {
          this.map.fitBounds(this.featureGroup.getBounds());
        }
      }

      return this;
    },

    // Update the map view
    updateMapView: function(fitGroup) {
      fitGroup = (_.isUndefined(fitGroup)) ? true : false;

      if (!_.isUndefined(this.map)) {
        this.map.invalidateSize({ pan: false });

        if (!_.isUndefined(this.featureGroup) && fitGroup) {
          this.map.fitBounds(this.featureGroup.getBounds());
        }
      }
    },

    // Render/visualize neighborhoods based on a property
    mapVisualizeNeighborhoods: function(property, formatter, exceptions) {
      var thisView = this;
      exceptions = exceptions || ['northeast_park', 'mid_city_industrial', 'camden_industrial', 'humboldt_industrial_area', 'downtown_west'];
      this.visualProperty = property || 'statRateMonth';
      this.visualFormatter = formatter || _.formatNumber;
      var legend = [];
      var data, colorScale, currentValue;

      if (_.isUndefined(this.featureGroup)) {
        return;
      }

      // Remove any exceptions from data range
      data = this.collection.filter(function(n) {
        return (exceptions.indexOf(n.get('key')) === -1);
      });
      data = _.map(data, function(e) { return e.get(thisView.visualProperty); });

      // Create color scale.  k-means minus exceptions seems to be the best
      // visual.  We also add a .2 as a minimum rate to ensure that there is
      // a visual difference for really low numbers like homicide rates
      // 'YlGnBu', ['#107F3E', '#B61673'] ['#107F3E', '#76107F']
      data.push(0.2);
      colorScale = chroma.scale(['#E0E0E0', '#86090D'])
        .domain(data, 9, 'k-means')
        .mode('lab');

      // Create legend data, mark the current part we are looking at
      currentValue = colorScale(this.model.get(this.visualProperty));
      _.each(chroma.limits(data, 'k-means', 9), function(l, i) {
        legend.push({
          value: l,
          color: colorScale(l).hex()
        });
      });
      this.getLegendEl().html(this.templates['template-map-legend']({
        legend: legend,
        display: currentValue.hex()
      }));

      // Color each layer
      this.collection.each(function(m) {
        var layer = thisView.getLayerByModel(m);
        var options = layer.options;
        options.fillColor = colorScale(m.get(thisView.visualProperty)).hex();
        layer.setStyle(options);
      });
    },

    // Focus on neighnorhood
    mapFocusNeighborhood: function(model) {
      this.model = (_.isObject(model)) ? model : this.model;
      var layer, options;

      // If model is set, show specific neighborhood.
      // TODO: Need to reset weight on other layers
      if (_.isObject(this.model)) {
        this.featureGroup.setStyle({ weight: this.styleDefault.weight });
        layer = this.getLayerByModel();
        options = layer._layers[layer._leaflet_id - 1].options;
        options.weight = options.weight + 8;
        layer.setStyle(options);
        layer.bringToFront();
        this.map.fitBounds(layer.getBounds());
      }

      return this;
    },

    // Make hover container
    renderLabelContainer: function() {
      this.LabelControl = this.LabelControl || L.Control.extend({
        options: {
          position: 'topright'
        },

        onAdd: function (map) {
          var container = L.DomUtil.create('div', 'map-label-container');
          return container;
        }
      });

      this.mapLabelControl = new this.LabelControl();
      this.map.addControl(this.mapLabelControl);
      this.$el.find('.map-label-container').hide();
      return this;
    },

    // How to handle mouseover events
    bindMapFeatureMouseover: function(e) {
      // Is this the best way to get this
      var layer = e.layer;
      var options = layer.options;
      var neighborhood = this.collection.get(layer.feature.id);
      var posY = e.containerPoint.y;
      var mapY = this.map._container.clientHeight;

      // Move position of control.  If the mouse is more than
      // halfway above viewport, move the label control
      if (posY < (mapY / 2)) {
        this.mapLabelControl.setPosition('bottomright');
      }
      else {
        this.mapLabelControl.setPosition('topright');
      }

      // Set style options
      options.fillOpacity = options.fillOpacity * 4;
      layer.setStyle(options);

      // Label
      this.$el.find('.map-label-container').html(
        this.templates['template-map-label']({
          title: neighborhood.get('title'),
          property: neighborhood.get(this.visualProperty),
          label: this.visualLabel,
          formatter: this.visualFormatter,
          n: neighborhood.toJSON()
        })
      ).show();
    },

    // How to handle mouseout events
    bindMapFeatureMouseout: function(e) {
      var layer = e.layer;
      var options = layer.options;
      options.fillOpacity = options.fillOpacity / 4;
      layer.setStyle(options);

      // Label
      this.$el.find('.map-label-container').hide();
    },

    // How to handle click events
    bindMapFeatureClick: function(e) {
      var layer = e.layer;
      this.options.app.navigate('/neighborhood/' + layer.feature.id, { trigger: true });
    },

    // Get layer by nieghborhod id
    getLayerByModel: function(model) {
      var searchModel = model || this.model;
      var topLayer = _.find(this.featureGroup._layers, function(l, i) {
        return (l._layers[l._leaflet_id - 1].feature.id == searchModel.id);
      });
      return topLayer;
    }
  });


})(mpApp['minnpost-crime'], jQuery);
